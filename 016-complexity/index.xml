<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>複雑さのはなし on Message Passing</title>
    <link>https://messagepassing.github.io/016-complexity/</link>
    <description>Recent content in 複雑さのはなし on Message Passing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://messagepassing.github.io/016-complexity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Re^2: 複雑さのはなし（から定番本について）</title>
      <link>https://messagepassing.github.io/016-complexity/03-karino2/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/016-complexity/03-karino2/</guid>
      <description>自分の最近の仕事はC++でアプリを書く、というものなので、Brooksの主張にかなり近い事をやっていますね。 C++はいろいろな事情でライブラリが使えない事が多いので、スクラッチから作るのが正当化される事もままある。 それがまさに時代遅れでもあるのだけれど。
そのまま複雑さの話を続けてもいいのだけれど、 自分がDan Luuのブログで面白いと思ったのは、複雑さよりも古典を批判する、という部分。なのでその話をしてみる。
持ち上げられ過ぎる古典 人月の神話は非常に良い本で、そこから引き出すべき教訓も多いと思う。 だが、さすがにコンピューティング事情は随分と変わっているので、現代には当てはまらない事も多い。 そしてそれは当たり前と思う。今となっては誤りになってしまった記述があったところで、Brooksの知性を疑わせるものでは無い。
問題なのは、その当たり前の事をわざわざ言わないといけない状況だ。 それは過去の本の引用で物を語る人が多く、それが間違っている事が多く、それを否定するのにいちいち通常よりもsolidな理論武装を要求されるせいだと思う。 持ち上げる方は空っぽでも問題無いのに。
そういう事にうんざりしているのは私だけじゃなくて、きっとDan Luuもそうだったのだろう。だから今更No Silver Bulletの批判をブログにしたのだろう。 それを読んで我々が痛快に思うのも、まさに日々そういう鬱陶しさを味わっているからでは無かろうか。
以前、達人プログラマーの新装版が出た時に、自分は同じような事を感じた事がある。(当時のブログ)
代わりとなる新しい定番本が出ない！ 何故古い本がこうも持ち上げられ続けてしまうのか？ 一つの理由として、新しい定番本が生まれていないせい、というのがあると思っている。
まず、プログラムという仕事の多様性が増したので、一般論は言いにくくなった。クラウドとC++アプリとAndroidアプリとwebフロントエンドはだいぶ違う。 業界ごとの特定のプロジェクトや企業の様子を語る書籍は今でもあるが、一般的な事を主張するのは昔より難しくなっている気がする。 現実は多様でケースバイケースです、では盛り上がらない。
それに付随して、そもそも最近技術書があまり読まれなくなった、という事情もあるかもしれない。 例えば先日の今年読んだものを見ても、 皆があまり本を読んでいない、と言っている。単にCovid-19のせいかもしれないけど。 読まれてないから書かれてない、という事もあるのでは。 技術書が読まれていないせいかは分からないけれど、自分の周りの有能なプログラマは、本を書いていない。コードを書いている方が明らかに報われる気がするから、さもありなん。
別の視点として、Brooksほど凄い奴はなかなか居ない、とう事もあるかもしれない。
やばいプロジェクトに巻き込まれた経験は、ここで文章を書いている人なら大なり小なりあるだろう。 かくいう自分も、やばいプロジェクトに巻き込まれた経験ならなかなかのレベルと言える。自慢にならない。
だが、やばいプロジェクトに巻き込まれた後に、それをちゃんと分析して、その場に居なかった人にも分かるように説明する、というのは、なかなか出来る事では無い。自分には無理そうだ。
会社がちゃんとそれを支援するのも、なかなか難しい。ちゃんとやったIBMは偉い。 プロジェクトが失敗したらその位当然やるだろう、と思うかもしれないが、残念ながらやらない会社の方がずっと多い。喉元過ぎれば熱さを忘れがち。
かっこよく怒りたいものだ 何故あたらしい定番本が生まれないのかはおいといて、それを所与とするなら。
古い本が持ち上げられ続けてしまうのは、誰かがたまにしっかりと反論していけば、それで防げるかもしれない。今回のDan Luuみたいに。 でも自分が何か思っても、なかなかああかっこよくビシッと反論するのは難しいんだよなぁ。
くだんのブログがかっこいいのは、出てくるのがPrestoでrustでggplotでビッグデータだからという事もあると思う（それだけでは無いだろうが）。 同じようにかっこよくやるには、かっこいい仕事をしている必要があるのかも。
などととりとめも無く書いて来ましたが、古典とか神話化してるが古くなった事とか、最近は結構ある気はするんですよね。どう思います？＞jmuk
 morrita 自分はあるとき良い本がないと感じるのをどちらかというと自分の問題のように感じていたのですが、 一方で推薦図書の世代交代の無さもそれはそれで事実な気がする。
古い本に反論するのもさておき、書籍に頼らない新しい学びのパスについて考えるのも有意義かなと思いました。
  karino2 それは自分も思ったけど、少し話が逸れるかな、と思って書かなかった＞実は自分の問題
実際の所は自分の問題と本が出てない問題のどちらなんですかね。両方な気もするけれど。
あと本に頼らない学びのパスは面白いかもしれない。公式文書はだいたいすでに他の技術を知っている前提で自身の技術を説明するので、新規に学ぶ人が難しくなっている気もしている。</description>
    </item>
    
    <item>
      <title>Re: 複雑さのはなし</title>
      <link>https://messagepassing.github.io/016-complexity/02-kzys/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/016-complexity/02-kzys/</guid>
      <description>昔に『人月の神話』は本を買って読んだはずだけど、手元には残っていないので、該当部分だけ O&amp;rsquo;Reilly Online Learning で読み直してみました。&amp;ldquo;Hopes for the Silver&amp;rdquo; という節に、世の中では銀の弾丸と目されているけれど、Brooks 自身はそこまでは思わない近年の技術的進歩が列挙されているんですが、Ada とその他の高級言語の発達、オブジェクト指向プログラミング、と時代を感じさせる並びの後に来るのがなんと人工知能! でもここで
 The techniques used for speech recognition seem to have little in common with those used for image recognition, &amp;hellip;
 教授! 我々はついにその2つを繋げられるなにかを見つけましたよ! というところで本題へ。
複雑さはどこから来るのか 複雑さには色々な場所からやってくる。
まずはドメインというか、解決するべき問題そのものから発生する複雑さ。いわゆる SE っぽい仕事の人々はこういう本を読んで、RDBMS のスキーマとかを延々と議論している、というのは私の偏見。金融とか医療とかにも、何かドメイン特有の複雑さがあるんだろうと思う。
ソフトウェアを書くプラットフォームから来る複雑さ。私は Android のフレームワークとしての良し悪しについて議論するほど Android アプリを書いていないけれど、Web アプリケーションは結構書いていて、HTML + CSS + JavaScript は、プラットフォームとしては格別に複雑だと思うし、* { Box-sizing: Border-box } FTW なんてのを見ると、複雑さの一部については偶発的なものといってもいいと思う。
もっと一般化すると、これは時間からくる複雑さともいえる。レガシーな仕様や実装が事態を複雑にすることは良くある。1900年の1月と2月を除いては。
クライアントサイドの、ソフトウェアが走る環境の多様性からくる複雑さ。Facebook の Year class: A classification system for Android なんかは、モバイル (といっても Web) をちょっとやっていた身としては、なるほどこういう手があったのかという感心があった。</description>
    </item>
    
    <item>
      <title>複雑さのはなし</title>
      <link>https://messagepassing.github.io/016-complexity/01-morrita/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/016-complexity/01-morrita/</guid>
      <description>本質的な複雑さ批判 森田が大ファンであるところの Dan Luu が「人月の神話」の Fred Brooks をディスる 記事を書いており、 痛快なのでみんなでこれ読んで与太話しようぜ、という回。(Dan Luu のページは Pocket か Instapaper 必須なのでみなインストールされたし。)
ここで批判されているのは Brook の Essential Complexity / Accidental complexity に関する記述。 極めて雑に復習すると、Brooks は「問題には &amp;ldquo;essential complexity&amp;rdquo; すなわち &amp;ldquo;本質的な複雑さ&amp;rdquo; というのがあるから、 プログラミング言語とかツールとか計算機性能の改善とかで &amp;ldquo;accidental complexity&amp;rdquo; / &amp;ldquo;偶発的な複雑さ&amp;rdquo; を減らしていっても限度があるよね、 ソフトウェア開発って難しいですね・・・という話だった。
Dan Luu はそんなわけねーとこの主張を一蹴し、自身の仕事から反例を二つ引き合いに出す。 森田に馴染みある方の例はこんなかんじ: オープンソースの分散 OLAP DB Presto に保存されている モニタリングのデータ相手に SQL を書き、結果を R で ggplot する。 Presto の性能、SQL の宣言的な簡潔さと ggplot の表現力は明らかに仕事を桁違いに簡単にして、問題の偶発的な複雑さを粉砕している。
一方で、と話は続く: Presto と ggplot が吹っ飛ばいた偶発的複雑さの量はすごいけど、一方でいま更に速いコンピュータがあったら 俺が遭遇した残りの偶発的複雑さも消し飛ばせるんだけどなーと愚痴タイムに突入し、 字数が足りないといいつつ Presto と ggplot の残念バグを次々に列挙してしていく（ここが一番楽しい）。</description>
    </item>
    
  </channel>
</rss>
