<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>未来予想 on Message Passing</title>
    <link>https://messagepassing.github.io/022-pred/</link>
    <description>Recent content in 未来予想 on Message Passing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://messagepassing.github.io/022-pred/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>次はバイオ！（今度こそ）</title>
      <link>https://messagepassing.github.io/022-pred/04-karino2/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/022-pred/04-karino2/</guid>
      <description>前の10年がびっくりするほど大した事無かったので、次の10年が同じノリなのか、それとも次の10年は違うぜ、と思うかで大きく分かれそうですね。 せっかくなので自分はすごい違うぜ、という方向で行ってみる。
1. 「独自の動作メカニズム」を持ったタンパク質を合成するようになる 最近生物の勉強がマイブームだったので、まずは生物とプログラムの融合的な分野から。
プロセッサはナノスケールでいろいろやれるようになってきたので、 次はタンパク質まわりだろう、と思っている。が、10年では汎用のマシンが出来る所までは行かないと思う。
遠い将来では合成したタンパク質を動かす「ソフトウェア」を作る日が来るんじゃないか、と思っているが、 10年ではそのだいぶ手前の、ハードウェア屋が望む動作を元にタンパク質の設計をしてそれを作る、くらいの段階なのでは無いか。
タンパク質自体は別に現時点でも合成出来ているけれど、現状はメカニズム自体は自然界にある物を少し修正したくらいで、 例えばキネシンのような「歩く」仕組みやミトコンドリアのF型ATPaseなどのように「回転する」というような構造と同じようなレベルで、 新たな動作のメカニズムを設計して実装する事は出来ていない、という認識でいる。
10年後はいくつかの人間がいろいろな用途に使いやすい駆動メカニズムが開発されて、 ハードウェアの設計のような形で、ナノスケールの動作について設計をして実装するようなあたりまで行くんじゃないか。 ただしその動きはハードコードされた性質の動きとなる。
そして今後の10年で作れるようになった動くハードを、その次の10年で「動かす」ソフトウェアをプログラミングしていっていろいろやれるようになる！
2. タンパク質合成のプログラム言語が生まれてその上のソフトウェアが書かれる 1番目はハードウェアで2番目はソフトウェアの進歩の話。
制限酵素などの条件指定や、既存のタンパク質のアクティブサイトの組み合わせなどが複雑化していき、 一段上の抽象度で制約を記述してコドン配列に落とすようなプログラム言語が生まれて、 その上のプログラミングが実用化される。
10年では完全に自由にタンパク質を設計する所までは行かないので、1と2は別々の道を歩む。 ソフトウェアは既存の構成要素の組み合わせの複雑化からプログラム言語が生まれる、という流れを予想。 あくまで既存の構成要素を組み合わせるだけなので1のような新しい機構を作るという所は行えない。
現時点でも簡単な組み合わせなどをcDNAライブラリから組み合わせて手動で作る事は行われているが、 次の10年ではこの組み合わせが複雑になりすぎて、 一番下のレベルで全てを人間が把握するのが困難になっていく結果、 「高級言語」に相当するなにかが生まれて、その上でのプログラミングが実用化されて、 目的のタンパク質を生み出すのに一般的な手法となる、と予想。
shinh なにも知らないのですがバイオ楽しそうですよねえ。キラーアプリはどういうものになるんでしょうか？   karino2 最初は月並みに転移しているガンの治療じゃないですかね。 血液とかからガンになっている配列を特定して、それを探して倒すようなタンパク質を施療として現場で設計してそれをmRNAで打ち込む、みたいな。 あとはLDLコレステロールとか探して排出するようにまとめて移動したり化学的にまとめて排出出来る形にしたりする、とか、その辺じゃないかなぁ。   morrita まったく畑違いすぎてプロテインソフトウェアが実現されても気づかなそうだけど、 そういうキラーな成果が出ればポピュラーサイエンス的に知ることになるのかもしれないなあ。  
3. ディスプレイのないコイン型のデバイスがスマホの30%くらいのシェアになる 画面がある路線ではスマホから大きく変わらないかな、と思うので、画面が無い系が発展するんじゃないかなぁ、と予想。
音と振動くらいでいろいろな事をさせられるデバイスで、今のスマホアプリ開発のように一般の開発者がユーザーとしてアプリ作って入れてなにかやれるような。 今の車の鍵みたいな感じのデバイス。
インターフェースは音声にしたい所だけど、バッテリはそれほど大きな革新は無いと予想するので、 スピーカー等は入れられないかなぁ。 という事で音声や画面は必要に応じて外部接続するような感じを想定。
ただ完全にすべてのデバイスが音声インターフェースにはならずに、既存のスマホやPCなどはそのまま残る。 個人利用としては結局スマホの方が主流で役割分担がされる程度。
morrita Apple Watch は電話の 10% 以下くらいの台数が出ているっぽいから、それより売れるとなるとなかなかですね。 ただ製品寿命が長くなると仮定すると所持割合は iPhone の 30% くらいあるかもしれない。 つまり時計くらい売れる画面無しポータブルデバイスが登場すると予言達成というかんじかな。10 年かければ何かはありそう。 次世代デバイスとして業界の人々はメガネ的な AR デバイスを推しているなか、画面ナシが勝ったら痛快ですね。   karino2 へー、Apple Watchが思ったより売れてて驚いた。 ただ画面があるのはいまいちだと思うんですよね。腕につけたくも無いし。 やはりキーホルダーにつけるプログラマブルな何かが欲しいなぁ。</description>
    </item>
    
    <item>
      <title>全体的に希望的予測です</title>
      <link>https://messagepassing.github.io/022-pred/03-kzys/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/022-pred/03-kzys/</guid>
      <description>普段はあんまり未来のこと考えていないので難しいですね。暗いことを予測してあたっても嬉しくないので、こうなるといいな、というものを中心に書きました。
予測 1. 静的型のあるスクリプト言語が人気になり、Python, Ruby に続く第三の選択肢になる この10年で Python や Ruby に型が入ったのはすごいのですが、私が Perl をみて「bless ってなんだよ。普通に class は予約語でいいし、標準ライブラリももっとオブジェクト指向になっていてほしいなあ。」と思っていたように、未来の人々は最初から型があるスクリプト言語を求めるんじゃないか、と思う。
このスマートフォン時代に、人々が最初に作りたいのはスマートフォンアプリのはずで、そこで Kotlin, Swift, Dart (Flutter) あたりを学んだ人にとって、Python や Ruby の実行時エラーってあんまり納得いかないもののはず。
shinh 型つきスクリプトそんなに流行らない、て書いたけど、なんか説得されるものがありました。 TypeScript は既に Ruby あたりのシェア倒したりは……してないか。今の Python/JS の位置まで来るのかは楽しみです   morrita 二千年代初頭に C++ や Java から Python や Ruby に行った人も似たような気分でしたが, 当時と違って昨今のモダン静的型言語はシュッとしているので Ruby, Python, Node だと差別化は不十分かもしれない。個人的には別に Kotlin でスクリプト書いても別に良いんじゃないかと思う時があるけれど、言語の文法よりはパッケージ揃えたりとかがめんどくさいですね。十年後に向けて Deno とかを試してみるべきなのだろうか。   karino2 F#はまぁまぁ必要なものは備えていると思うけれど、第三の選択肢は遠い…  
2. 開発環境としての macOS の人気が落ちて、Linux が普通の選択肢になる macOS の iOS 化、巨大テック企業ってあんまりかっこよくないよねという気分、地球温暖化の懸念と修理する権利、学校指定の Chromebook をハックして遊んでいた世代の台頭、などなどが相まって、今の猫も杓子も macOS 時代が終わって、開発者は Linux を使うのが普通の選択肢になる。</description>
    </item>
    
    <item>
      <title>僕たちの将来</title>
      <link>https://messagepassing.github.io/022-pred/02-shinh/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/022-pred/02-shinh/</guid>
      <description>序文 つねづね「俺の未来予想の当たらなさぷりには自信がある」と自負しています。特に「XX とか当たるわけないでしょ」と思ったのも関わらず、後になってそれに仕事で関わる、ということが数回起きていて、グーグルで社内オンリー情報だった時代の Chrome や Android を見て、「なんじゃこれ、グーグルがサーバサイド以外やってどうすんの？」と思った二年後に Chrome チームで働いていましたし(その後 Android 関係の仕事もした)、「ニューラルネットの復権！」みたいな話を見て「ワロタ、 C マガかよ」と思ってた二年後にはグーグル翻訳チームに入れてもらっていました。 5年前に書いた未来予想 によると GPGPU は永遠にニッチ、みたいなことが書かれていますが、 CUDA 使ったり、それを倒すべく頑張ったりしているのが最近であります
逆に僕が夢中になったテクノロジーを3つほど挙げていってみると、 Native Client 、 Intel TSX 、 Swift for TensorFlow 。なかなか見事な予想ではないでしょうか
というわけで逆張り推奨な予想をやっていきます。本人はいたってマジメなやつと、あとは単なる願望というものがあります
Predictions 1. GPU はグラフィックプロセッサに戻る ドメイン特化なアクセラレータの特需が今しばらく続くと、 CUDA はアクセラレータ用途としては特化度が低すぎて、没落するように思う。「SIMD 使うくらいなら GPU でいいよなあ」が「GPGPU やるくらいならアクセラレータ使えばいいよなあ」となるはず、という話です
一応書いておくと、最近のメインの仕事がアクセラレータで GPU を倒すというものなので、ポジショントーク的というか、個人的な意気ごみです
morrita 強い GPU を買って足せないモバイルとかは既に割とそういうかんじですよね。NVIDIA の株価は下がりそうだけど、中の人はもともとグラフィクス業界人なのでむしろ喜ぶかも知れない・・・。   shinh モバイルはそうですね。クラウドおよび HPC で V100/A100 祭りになっている状況は終わるのでは、という予想ということにしておきます  
2. 深層学習の自然科学応用でノーベル賞 ノーベル賞は成果出てから受賞までに時間がかかると思うので、受賞自体はしないとして、 2030 年までの深層学習を使って得た成果がノーベル賞を取ると思う。たぶんふたつくらい
このスライドの最後の
 物理学における機械学習は「第３の実験」
 とか、この文章の</description>
    </item>
    
    <item>
      <title>未来予想</title>
      <link>https://messagepassing.github.io/022-pred/01-morrita/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/022-pred/01-morrita/</guid>
      <description>唐突ですが未来予想をするターンです。10 年後のプログラマ事情（じゃなくてもいいけど）を予想してみたい。
背景としては、むかしむかしの 2005 年に Steve Yegge という当時人気だった blogger が Ten Predictions という記事を書き、それを十年後の 2015 年に Dan Luu (森田が好きな blogger)が採点する、という出来事がありました。我々もいまテキトーなことを書いて 10 年後に採点したら面白いんじゃないかな。という動機。Caveat としては 2005 年の Steve Yegge はテック業界に詳しい若者ブロガーでしたが、2021 年の森田は業界動向とか真面目にウォッチしてないおっさんなのであまり面白い予想は書けない恐れがあります。が、まあそれは仕方なしということで。
一人10件を目標に、あまり保守的でもアグレッシブ過ぎても面白くないので、半分くらいあてるつもりで行きましょう。
FYI: 2011 年前後 本題に入る前に、10 年というタイムスパンを体感するべく 2011 (+/-1) 年くらいがどういう時代だったかを雑に振り返ってみます。 どのくらい雑かというと、2011 年前後の Hacker News の top N stories を適当にクエリしてみました。
2011 年前後には&amp;hellip;
 Steve Jobs が亡くなった。サブカルチャー的に解釈すると、iPhone の革命が終わり、その地位を盤石にしたのが 2011 年といえる。 Stripe ができた。現在の未上場スタートアップの筆頭株、10 年たってもまだ上場してない。上場しないで引っ張るスタートアップの時代の始まりとも読める。 Zynga のきな臭いニュース。ソシャゲ的なものに暗雲が差した時代。  いまいちプログラマっぽい話がないな・・・ランキングを適当にスキップしつつ眺めると
 Matz が Heroku に転職。ちなみにこの前後で Heroku は Salesforce に買収されている。世間での Ruby の流行がピークだった頃とも解釈できる。Rails の新バージョンがリリースされると昨今の React リリースみたいなかんじでけっこう盛り上がる。 一方で Meteor という JS 主体の PaaS がでてきたのも 2011 周辺。なお同時期に創業された Parse という似たような PaaS は Facebook に買収された後消滅、Firebase は Google に買収されました(消滅はしていない)。PaaS が盛り上がっていた時代。今も普通に使われてますが。 JS といえば Fabrice Bellard が Linux を JS にポートする(とは一体?</description>
    </item>
    
  </channel>
</rss>
