<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ポエムのはなし on Message Passing</title>
    <link>https://messagepassing.github.io/015-poems/</link>
    <description>Recent content in ポエムのはなし on Message Passing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://messagepassing.github.io/015-poems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>インフォーマルな文章を書く楽しさ</title>
      <link>https://messagepassing.github.io/015-poems/06-secondlife/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/015-poems/06-secondlife/</guid>
      <description>皆さんはじめまして。ゲストとして呼ばれた、secondlife です。Tateno Culture といった形で以前森田さんが書いていたが、あれは Tateno Culture というよりは Hatena Culture の話だと思っています。なので、今回はインフォーマルな文章という主題とはずれるかもしれませんが、自分はなぜそんな感じの文章を書いていたのか、というのを当時のはてな時代を振り返り書いてみようと思います。
 はてな社に居た当時、これが皆さんの想定するインフォーマルな文章かはさておき、さまざまな社内向け文章を社内の全員、とは言わないまでも、7-8割の人がけっこう書いていた。
自分もしょっちゅう書いていたのだけど、なぜ書いていたのかを今更考えると、それはひとえに『楽しかったから』だった。
なぜ楽しかったのか 当時は2006年頭、自分は15人目の社員として会社にジョインした。入社すると hatenawiki なるはてなグループ(今で言う Qiita::Team や Esa、Kibela といった、Wiki と Blog が融合したようなサービス)に、エンジニア非エンジニア関係なく、ありとあらゆる様々な文章が投稿されていた。
サービスの思想や考え方、会社組織のあり方、人事評価、各種収益、新規サーバ構築方法、お菓子やジュース補充、といった会社全体の話から、日々の社内日記のような話題、新しくできた近くの店の定食が美味しかっただの、モンハン面白いから夜みんなぜやろうぜだの、この言語ならこの実装がこんなにきれいに書ける、などなど、制限など特に無く良くも悪くもありとあらゆる情報で溢れていた。取締役会の生音声なども公開されていて、具体的な年収といった個人の機微情報以外、ほとんどが公開されていたんじゃなかろうか。
そんな場だったので、入社したばかりの人も最初は戸惑いつつも、徐々に書くことに慣れ、みんな当たり前のように文章を書いて公開していってた。自分もその一人で、新規サービスの話だったり、全社で導入する新しい開発手法だったり、細かい技術Tipsだったり、サービスの批評だったり、ただの日記だったり、とりとめもなく様々なことを書いていた。全社での情報共有が～とか生産性が～など仕事としての価値向上を考えて書くというより、自分はただ楽しかったから書いていたのだと思う。
なぜ楽しかったのか。いくつかの要素に分解して考えてみる。
ポエムの読み書き ベンチャー初期において、何を目指してるのか、どんな世界にしたいのかというポエムというのは思想・カルチャーを作る上でも重要で、それを偉い人が発信する、それを読むだけでも楽しかった。
これは共有の場(はてなグループ)自体を毎日見ることにもつながっている。
限られた技術コンテキスト 技術関連の文章の場合、ほぼ全員がその技術を理解できるという、当時の技術コンテキストの狭さがあった。言語は Perl, JavaScript、RDB は MySQL、Linuxチョット、エディタは Vim か Emacs あたりが仕事で構成される技術の殆ど。Web アプリケーションは DB に CRUD して、HTMLに整形して出力するがほとんどの責務。今のように汎用化された様々な技術を目的や状況に応じて選択できる時代ではなかったので、話題の範囲が狭い。
つまるところ、みんながみんな理解できるネタで話せるので、他人の技術文章を理解しやすい、自分が書いた文章もほとんどの人が理解できる状況が生まれていた。そのため場の話を理解しやすい、理解してもらいやすかった。
適度なフィードバック 書いた文章に全く反応(フィードバック)がないとつまらない。もちろん仕事のためのドキュメンテーションは反応を期待して、というよりは後の自分や組織のために書くのでそれは別なのだけど、情報発信するモチベーションは殆どの場合、なんらか期待される反応とセットだ。
期待される反応はコメントやはてなスター(likeのようなもの)もあったが、何より大きかったのが「トラックバック」だったと思う。トラックバックは、文章内で URL を記載するとURL先のWikiやBlogの記事に、この文章から言及されてるというリンクが付く。
このトラックバックのちょうどよい距離感。パーソナルスペースである、自分が主体的に書いたWikiや自分がオーナーのblogから、相手のパーソナルスペースをほとんど汚さない形で通知し合うことができる。blog(他人) / wiki(共有) / blog(自分) と別れてはいるが、相互にゆるいつながりを生むことができる。
ポエム的な記事であれば自分もそれに対して共感や批評を書けるし、技術的なドキュメントや Tips であれば、それに対しての別の手法だったり Emacs の話に対してそれ Vim ならこうやれるよ、といったような返しなども、コメントというその記事スレッドに閉じられた空間ではなく、自分のblog記事として書くことができる。
また、今で言うメンションも id トラックバックという機能で実装されていたため、特定の人の話を聞きたい、みたいな記事も気軽に書くことが出来た。
この辺の適度なフィードバックがしょっちゅう行われていたため、なにか情報発信をすると、より良い意見、様々な意見が貰え、さらに何か書こうという楽しさが発生していた。id トラックバックも、ゆるく「話してよ」というのが伝わるため、あまり情報発信しない人でも定期的に発信が行われ、全員参加して場を作る、という一体感が生まれていたのだと思う。
小さな組織 自分が居たときは十数人〜40人程度の小さな組織だったため、全員が技術に限らず様々なコンテキストを共有しやすかったことも挙げられるだろう。また小さな組織だと、誰がなんのプロフェッショナルでどんなことをしているのかが解りやすく、そのため信頼関係を積みやすく、相互理解もしやすい。</description>
    </item>
    
    <item>
      <title>社内の情報共有とか社内ソーシャルメディア</title>
      <link>https://messagepassing.github.io/015-poems/05-jmuk/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/015-poems/05-jmuk/</guid>
      <description>グーグル社内の情報共有とか社内ソーシャルメディアは、たぶんHow Google WorksとかWork Rules!といった本で軽く触れられていると思う。ちゃんと読み返してないけど、だいたい似たようなことが書かれていただろうと思う。
大昔の話をすると、wikiがあってそこで雑にいろいろ書かれていた時代というのがあった。そういうところで、仕事の情報も、そうじゃないカジュアルな情報共有も行われていたような気がする。ただ、wikiはだんだん使われなくなてきたような気がする。社員数の急増に対してスケールしなくなっていったのだろう。可視性の細かい制御とかができないのも、組織が大きくなってくると難しい話になってくるからかもしれない。
GoogleBuzz / Google+ GoogleBuzzというのは、もう覚えていない人も多いだろうけど、マイクロブログ的なソーシャルサービスで、一般サービスとしては一瞬で撤退してしまった。だが、ローンチより前には社内で使われており、社内ではそこそこ流行っていたと記憶している。Buzzの失敗の原因はいくつかあるとされているが、そのうちのひとつは社内でそこそこうまくいっていたことで誤解してしまったことだとされている。
その後のGoogle+も、社内では唯一のオフィシャルなソーシャルサービスなのでけっこう流行った。けっこういろんな長文投稿をする人もいた。rantを書く人もいたし、技術的な小ネタを書く人もいてけっこう面白かった。社内で書いたものは社外にはそのままでは共有できないようになっていたので、それなりに安全なソーシャルサービスになっていた気がする。UIが一緒なので、間違って社内向けrantをgmail.comのアカウントで投稿してしまうといった事件も発生したりしていたけど、裏を返せばそれぐらいには社内にオーディエンスがいたのだった。
ただし、社内Google+は次第に人気を失っていったように思う。決定的だったのは、一般公開Google+が終了したことか、それともCurrentsという名前にリブランドされたことか。いまでもたまに見ると投稿はちらほら見るけど、かつての賑わいは失われてしまったような気がする。
memegen もうひとつユニークなサービスがmemegenだ。memegenは社内向けの「インターネットミーム」の投稿サイトで、ミームというのは画像に好きなキャプションをかぶせたジョーク、といったものだ。これはめちゃくちゃ流行っていた。基本的に皮肉っぽく、社内のいろんなネタを笑い飛ばせるところが良かった。また、全社のTGIFでの発表なんかでも、おかしなことを投稿するとすぐ茶化されたりといったこともあった。人気を反映して真面目な問題提起がなされるようになったりしたし、会社の偉い人たちもこういうところで雰囲気をはかるようなところがあったりした。ただ、独自のカルチャーもあるし、奇妙な「お約束」もあったりした。皮肉っぽいカルチャーゆえに、妙に会社や（ほかのチームの）製品のクオリティに対する文句も増えてきている気がする。今でも人気はある気がするし、たまに見ると面白いんだけど、わたしはあんまり見なくなってしまった。あとmemegenは構造上、ジョークがメインであって、ソーシャルにはいいんだけど、メモとかそういう話ではない。
g3doc これも存在が明らかになっているみたいなので書いておくと、このごろはg3docにまとめておくという話もあるにはある。g3docは、社内用のgithub pagesのような仕組みであり、markdownで書いたファイルをコミットしておくと、ウェブサイトでいいかんじに表示してくれる、というもの。
これ自体はよくできていて、とくにオフィシャルなドキュメントの整備には向いている。チームの情報をまとめたり、といったことには広く使われている。が、ファイルをコミットしないといけないので、雑多なメモやら、カジュアルな情報共有にはあまり向いていない。痛し痒し。
Google Workplaces けっきょくのところ、いわゆるgSuite / Google Workplacesの製品が、いまではよく使われている気がする。たとえば、ちょっとしたノートやtipsならGoogle Docsに書く。チーム内のインフォーマルな情報共有にはGoogle Chatが使われるようになった。あとGmail。グーグルではメールが非常に頻繁に使われていて、わりとちょっとしたこともメールで書くことはある、気がする。意図的に雑談チャット風のメーリングリストを運用していて、ちょっとしたこと（たとえばツールやスクリプトのトラブルなど）の相談なんかは、そういうところで行われることもある。Google Sitesは……あんまり使わないかな……チームにもよるんだろうけど。
この分野、もうちょっとどうにかならないものかと思ってはいるけれど、なかなか丁度いいものというのは難しいんだなという気がする。あと意外とDocsはそこまで悪くはない。
 morrita 知らない人のために補足すると、うっかり公開されてしまった社内向けポストというのは &amp;ldquo;Steve Yagge Platform Rant&amp;rdquo; という名前で 10 年くらい前に話題になりました。思えばこの頃が Google+ 最盛期だったかもしれない。なおその後 Steve Yagge 氏は転職して Grab という会社で数年働き, いまはリタイアして趣味のオンラインゲーム開発をしているそうな。
個人的に社内ソーシャルメディアの衰退にとどめを刺したのは 数年前の超絶キナクサ案件 かなと思います。 自分はアンチソーシャルメディアなのでもともとそんなに書いてなかったけど、このあとは空気が悪すぎてほんとに書く気なくなった人が多いんじゃないかな。 そして社内の vocal な人たちは野(Twitter)に放たれ Tech Employee Activism の先駆けとなったり外資系ドヤり勢となったりしたのだった。 めでたしめでたし。
  </description>
    </item>
    
    <item>
      <title>もはや書く気おきない</title>
      <link>https://messagepassing.github.io/015-poems/04-morrita/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/015-poems/04-morrita/</guid>
      <description>全然書いてないですね。
書いてない理由は色々だけれど、ポエム/お気持ち表明系の話と技術的な度合いの高いメモでは空気が違うと思う。 かずよしさんの話 は主に前者という認識。 なので二つ別々に議論してみたい。
お気持ち表明系 まずはまじさんがポエムといっているようなやつ。
書いてない理由は、もちろん英語だから厳しいのはある。 がそれはさておくとして、チームによってポエムに対する温度差があると思う。 まわりの人が色々言っていると自分もそういうことを考えたり書いたりするようになる。 まわりに意見を表明する人がいないと、自分だけでは角が立つ気がしてわざわざ声を上げる気にはならない。 意見が多いチームにいた頃はたまになんか書いていた気がする。今はゼロ。
あと今の部署は文章より face to face を好んでいる。 割とエラ目の人が定期的に &amp;ldquo;office hour&amp;rdquo; という名の update+unconference みたいのを開催し、人々はそういう forum で意見を表明している。 でも、これだとほんとに英語的な厳しさがあるね。 Crucial Conversation を即興でやるとかムリ。これは自分だけでなく周りの non-native speaker も苦労しているように見える。 誰でも意見を言える環境の方が風通しは良いから、その点でいまの部署はイマイチなのだろう。 ただすごく不満というほどではない。チームの価値は風通しだけではないし。
あと大企業でそれなりに mature なチームだと、何か言ったくらいで変化を起こせる気がしない。 良くも悪くも企業や組織の文化は出来上がっていて、したっぱ平社員がどうこういう話でもない。
エンジニアリング的にいまいちだと思うところ、たとえばリリースプロセスとかも、 変えるのが大変なのはわかっている。自分のチームの TPM とか超優秀で Accelerate 的なリリースの理想系 はどう考えてもわかってる。そんな人がいまいちな現状に甘んじざるをえない困難は想像がつくから、 &amp;ldquo;DORA の調査によれば&amp;hellip;&amp;rdquo; とかさ、言えないよね。
こういう納得のいきやすい例だけでなく単に気に入らないものも色々あるけど、文句を言ったところで変わらないことに違いはない。 こういうのを変えたいと思ったら労力か権力か、あるいはその両方が必要。 口先だけの感じ悪い人にならず、しかしなんか書くだけで特に何もしない、という綱渡りをするには今の 5 倍くらい英語力/米国文化資本がないとムリ。
他人を educate するにしても、自分で書き下すより世の中なり社内の文章のほうが大抵よく書けている。それをリンクすれば済む。 「コミットログもうちょっとなんとかしてくれ・・・ほらこれ」 とか 「副作用のある部分は外に押し出して計算のとこだけテストかいてくれ・・・・ほらこれ」 とか 「目に優しく early return して flat にしてくれよーほらこれ」 とか、コードレビューでありがちなコメントの例。 あと、そもそも自分の opinion で他人を educate する authority もそんなに無い。下っ端だからね。</description>
    </item>
    
    <item>
      <title>書いていないなあ</title>
      <link>https://messagepassing.github.io/015-poems/03-kzys/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/015-poems/03-kzys/</guid>
      <description>インフォーマルなもの、書いていないなあ。
Design Docs の話のあとだと自分の書いているものを &amp;ldquo;Design Docs&amp;rdquo; とは言いにくいのですが、そういうフォーマルなものはそこそこ書いている。チケットが起点の調べものはチケットに書いていて、「これ読んでおいて」的なものはコードレビューでリンクを貼ることが多い。自分専用の雑多なメモとか TODO は、Quip という Google Docs みたいなものが社内で使えるので、それに書いたり、ローカルのテキストファイルに書いたりしている。エッセイは全然書いていない。
ちなみに、こういったインフォーマルな書き物をインターネットの人々が「ポエム」と呼ぶに至った経緯に関しては、昔に自分のブログに書きました。
私もミクシィで働いていたころは、Confluence のブログ機能を使って何か書いたりしていた記憶があって、あれは悪くなかった。morrita さんが以前に書いていた Tateno Culture も、はてなグループが起点だし、ミクシィも当時は人々が日記を書くサイトだった。そういう会社に集まる人々は、自分の考えを文章にまとめて、他人の読めるところに置いておくけれど、とりわけ「読んでね」と促すわけでもない、という行為と相性が良かったのかもしれない。
ただ、思いかえすと、これって「読んでね」と言わないことでどこかにエクスキューズを確保した、必要以上にインターネット的なコミュニケーションのとりかただったなあとも思う。社内なんだからもっと間合いを詰めても良かった。Slack の分報チャンネル (2005) にも同じような気持ちがある。読んでほしいことがあったら、チームの Slack チャンネルなりメーリングリストに送ればいいのでは? 気楽に書けるのが良いのはわかるけれど、私は気楽に書いたものはそこまで読みたくなくて、でもそれを明示してしまうと色々と角がたつのでちょっと&amp;hellip;
そういったわけで、ここ数年は、読んで欲しいものは「読んでね」と明言して、それなりに気合を入れて書く生活を送っている。行間とか空気を読んでもらうことを期待するより、書いてあることを読んでもらったほうが良い。また、shinh さんが冒頭で書いている
 スタートアップの社内プロジェクトの場合、読み手が少ないのでフォーマルなドキュメントを書くコストはペイしにくいと思っています
 と、逆向きの力が大企業だと働いていて、フォーマルな文章を書くコストはペイしてしまいがち、というのもある。
一方で、皆さんの話を読むと、自分が書き損ねているものについてはちょっと考えてしまう。自分の頭の中だけにあって、本当はちゃんとした文章にするべきだけど、とりあえず雑なかたちでもチームで共有するだけでも何かが改善できそうな情報、いくつかあるような気がするなあ。
 karino2 「読んでね」と「書かない」の２つだけ、というのは両極端な気がしますね。 フォーマルな文書には向いていないものも世の中にはいっぱいあるんじゃないかなぁ。   kzys そうですね。年をとるにつれて、雑なかたちで共有できそうなものを「もっとちゃんとしよう」とフィルタリングしてしまうの、ブログの更新が少なくなるのとも似ている気がします。   morrita Design Doc でない短めのフォーマルな書き物、N-pager みたいのを書く土壌があるのなら、インフォーマルな書き物の出番は減るのかもしれない。インフォーマルなものを頻繁に書いていた若かりし頃、逆にそういうフォーマルなものを書いてました？自分はぜんぜん書いてなかったな。   kzys 同じく書いてませんでした。「ちょっと文章にまとめてチームでレビューしましょう」というチームメンバーも (いま思い出せる範囲では) いなかったし、自分自身も、プログラミングの前に文章を書くことについて退避する気持ちがありました。Paul Graham かぶれというかなんというか。   shinh ポエムの経緯面白い。読み手が少ないどころか誰もいなくても、自分の思考の整理のツールになることもあるかもですね。今週自分が書いたコードをざつーに説明するスライド作って、結果としてリファクタリングが捗ったので思いました。グーグルにいた頃を思い出すと、大企業だとちゃんとレビューとかするので、思考も整理せずやった仕事なんてあまり残ってなかったかもなーとも思いましたが。   </description>
    </item>
    
    <item>
      <title>ポエム</title>
      <link>https://messagepassing.github.io/015-poems/02-shinh/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/015-poems/02-shinh/</guid>
      <description>ちょくちょくポエムと呼ぶようなインフォーマル書きものするので、よく僕がやる通りの形式で、よく書くような感じのメモを殴り書きしてみました。 karino2 さんが大作感があったので、箸休めにどうぞ。
 スタートアップの社内プロジェクトの場合、読み手が少ないのでフォーマルなドキュメントを書くコストはペイしにくいと思っています どういう種類があるかなと考えてみると、以下のようなものを思いつきました  新しいことやる人にこういうの考慮に入れるのではという思いつきを共有する種類のメモ 自分がやった作業を引き継ぐ人に、現状の課題を説明して、何をすれば再現できるか、本当はどうあった方が良いと思っているか、などを共有するメモ ちょっと複雑なものを書いた時に、自分の備忘録も兼ねて、ざっくりとした実装の説明 問題だと思っていることの報告   1 と 2 は、口頭のミーティングの前に準備しておいて、それでトピック思い出して口頭で情報を補いつつ、補った有用と思われる情報はミーティング中にメモに追記していったりします コンポーネントのからみあいとかの説明は、口頭では伝わりにくいので、文章を細かめにしておいて、わからないところあれば slack でお願いします、とかでいいのかなと 1 は思想の共有というか、こういうコンポーネントがあると良いのでは、みたいな、アイデアの共有みたいな話をする時にも似たようなスタイルになるかも 3 は本当に読み手が存在するか謎なので、未来の自分が読める程度にしていて、他の人から見れば謎の文章かもです 4 は自分のよく知らない領域に問題が起きていて、込みいった相談がしたい時ですね 書いてる時間がもったいないので、なんというか雑ですね なぜか箇条書き使うことが多いですね。意味的には &amp;lt;li&amp;gt; が適切ではない使いかたなのだけど  後からこういう感じでメモを追加できるのは良さではある   英語の reading/writing は苦手だがそんなに苦でない、と思ってたんですけど、最近しみじみ思うのは、やっぱこういうの日本語でできるとむっちゃラクですね  ちょっとした調整で良くなったり悪くなったりするアルゴリズムがあって、「なんかこの PR で速くなってるんですが、この PR のおかげではなく、桶屋だと思います」とか言っていたりして、この桶屋みたいなのが気軽に使えて通じるのがね   これ草稿の段階で美文章滅すべし を kzys さんに教えてもらったのですが、これ僕がこのスタイル好きな理由をとても良く説明してくれていますね。  英語のことちょっと書きましたが、グーグル時代はこういうのはあまり書かなかったですね。でも、全く書かなかったかというと、メールに長めの返事をする時は結構これ的な箇条書きも多かったな、と思いました。 &amp;ldquo;Interesting idea! My random thoughts:&amp;rdquo; みたいな感じで始めて、あとは箇条書き、というような。むしろ英語だから美文章書けない苦肉の策として、自分の中で定着していった定石なのかもです。
他の外資系大企業陣営はどんなもんでしょうか？
 shinh そういえば2ヶ月ほど前に書いたやつが、あまり社内事情とか関係なくて、そのまま出して問題なさそうなので、サンプルとして紹介してみます。普段はこのノリで技術的な内容書くことが多い感じ: https://docs.google.com/document/d/1v_EoYtnMY9-jBuGME6uQMNIQ6XIIkrO8uPO2Lc9M1zs/edit   morrita 箇条書きって書く側に optimize されてますよね。箇条書きで省かれている論理構造を読む側で補う前提がある。それで良いかどうかは「読み」という需要と「書き」という供給のバランスで決まると思うけど、読まれたいコンテンツを持っている人はばんばん箇条書きした方が良いのだろうなあ。あるいは「本当に読み手が存在するか謎」でも書ける余剰があればいいのかな。メールの返事とかは明らかに自分の返事に需要があるので、自分もよく箇条書きしてる気がする。   </description>
    </item>
    
    <item>
      <title>インフォーマルなドキュメント</title>
      <link>https://messagepassing.github.io/015-poems/01-karino2/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/015-poems/01-karino2/</guid>
      <description>Design Docの話を書いていて思ったが、自分はそれよりもWikiとかインフォーマルなドキュメントを書く方が好きなんですよね。 という事でその辺の話を書いてみる。
Wikiに何書いているの？ Wikiはインフォーマルにいろいろ書いていて、インフォーマルゆえに「これ」というのは難しいのだけれど、 皆が何書いているかを知りたいので自分のやっている事もなんとなく言語化してみる。
コーディングにまつわる、直近のTODOの書き出し まずやらなくてはいけない事が複数あってなんか手が動かない、みたいな時に、やらなきゃいけない事を箇条書きで書き出したりする。 箇条書きに書き出して、それを眺めて考えたり、散歩してきたりして、やらなきゃいけない事を考えていく。
自分の場合、何か手が動かない理由の半分くらいは何をやるかが自分の中で明確になってないケースなので、 そういう場合はWikiに書き出してそれを眺めて考える、というのは結構有効に機能している（そうじゃない場合は結局手は動かないのだけれど）。
簡単なものはローカルのテキストファイルに書いているのだが、手強い物で考える必要があるものをWikiに書いて考えている気がする。
曳光弾にまつわる事 何を作りたいかが曖昧で、いわゆる曳光弾を打つ時にもよくWikiを書いている。 何が曖昧なのか、よく分からないと思っている事はなんなのか、をぼんやりと書いて、 その辺をもう少しマシにする為こんな感じの曳光弾を打とうと思ってる、とか書く。 で、実際に実装していく過程で考えてたのは全然違っていて、実際の曳光弾は全然別の物になって、分からないと思っていた事や曖昧と思っていた事も全然違う所が曖昧だった、 みたいな事が判明したりするのだが、そういう事も追記していく。
あと実装が終わったあとにどうだったか、は良く書いている。分かった事、新たに生まれた分からない事、当初考えていた事がどこが間違いだったか、など。
最初に思っていた事はだいたいいつも間違いなのだが、最初に書いた事は訂正はせずにそのまま残している事が多い。 あとに追記した事だけでは意味をなさず、でもその前の記述は間違っている、というような状態にはなりがちで、これについては歴史改変のあたりで後述する。
自分マイルストーンにまつわる事 やろうとしている事が壮大過ぎて何から手を付けていいかよく分からない、という事がある。
そういう時にはやりたい事を適当に分割した、自分マイルストーンを勝手に定義して、それにバージョン番号を降って開発を進めていく。 Ver 0.1ではXXXをやる、Ver 0.2ではYYYYをやる、みたいな事をだらだらと書き出す。 次にやる事はまぁまぁ詳しく、次の次にやる事はぼんやりと、その先は妄想みたいなのが一行書かれてるだけなのが並ぶ、みたいな形が多い。
始まりは前述のTODOの書き出しの一種だが、その後各自分マイルストーンのサブセクションが成長していく所がちょっと違う。 また各バージョンと先述の曳光弾との違いは曖昧。
自分マイルストーンはチケットも切って、Wikiとは相互リンクを貼っている。
壮大な事はだいたいうまく行かないので、なんでうまく行かないのか、みたいな記述が増えていって当初考えていたところまでたどり着かず、どこかでピボットする事になる、というのもありがち。 そういう軌跡が曖昧に残る感じになる。
設計的なこと 設計的な事を書く事もある。ARCHITECURE.mdみたいにあとから書く事もあるし、 作る前になんとなく思っている事を書き出す事もある。 レイヤリングとか、本当はこうしたいんだがこういう理由でこうしている、といった言い訳とかそういうのも書く事はある。
基本的にはソースコードやコメントやコミットログやUnitTestで設計意図は読み解けるように書いているつもりで、それが望ましいとは思っている。 特に設計的な事はなるべくコメントに書くようにしている。
でもWikiにも書いてあるな。どう違うんだろう？ Wikiはファイルをまたがる全体的な事や補助的な情報を書いている気がするが、今見直すとdoc stringに書く方がいいな、と思う事もある…
feature flagとか技術的に知られているイディオム的な解説 何かを実装した時に、それが業界で良く知られたアイデアに基づいている事がある。feature flagの仕組みとか。 そういう、実装した事に関わる、一般常識ではあるが知らない人も居るような背景知識を、Wikiで解説したり、further readingを紹介したりする。 また、参考にしてはいるが違うものになっている場合は、その理由というか裏話的な事も書いている。
調査関連 調査する時はWikiに調査する内容とか調査のモチベーションとか読んだ記事とか動画とかのリンクとかを書いたりする。調査はissueにする事もあり、その辺の使い分けは曖昧。 外部技術に関する調査で公式ドキュメントとか動画を読んでいくようなのはWikiが多いかなぁ。 逆にパフォーマンス調査とか自分たちのコードベースの特定の側面とかを調査するものはissueにする事が多い。issueとの使い分けについてはあとでも触れる。
karino2 on software 何か意見を言ったり何かフィードバックを返す時に、背景が膨大で全部その場では説明出来ない、という事がある。 例えばslackでバグの報告とか質問があった時に、Issue trackerに上げてもらう。 そういう実際の行動はその場でお願いしたりすれば良いのだけれど、何故そうした方がいいのか、というような背景とかについては、 その場ではあまり説明出来ない。
そういう時に、そもそもIssue Trackerを使う意義とは何か、とか、どういうissueの記載が望ましいのか、とか、 そうした背景の説明をエッセイとして書くというのをやっている。
そういう「直接はチームの決定には関係しないが、背景となるようなソフトウェア開発に関わるエッセイ」は、 Joel on softwareオマージュとしてkarino2 on softwareというタイトルにしてWikiに書いている。</description>
    </item>
    
  </channel>
</rss>
