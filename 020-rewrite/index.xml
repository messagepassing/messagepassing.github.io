<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>書き直しのはなし on Message Passing</title>
    <link>https://messagepassing.github.io/020-rewrite/</link>
    <description>Recent content in 書き直しのはなし on Message Passing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://messagepassing.github.io/020-rewrite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>書き直しという夢</title>
      <link>https://messagepassing.github.io/020-rewrite/06-morrita/</link>
      <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/020-rewrite/06-morrita/</guid>
      <description>個人的な体験 書き直し。カッとなってバーンのやるのは悪手で、リファクタリングのように漸近的とは行かないまでも境界のはっきりした小さな部分問題を上手に切り出してシュッとやるのが良い。皆が書いたのを読んでそんなコンセンサスを確認できました。それができるコードベースならカッとならない気もするけれど。
そういえば個人的な話を書いていなかったとはまじさんに言われて気付いた。
自分は新卒入社した会社でカッとなって書き直しをした結果ひどいデスマをやらかした体験があり、そのトラウマからアンチ書き直し派になった。向井さんの体験と似ていなくもないけれど、自分でやらかしてしまった。ちなみに同じ会社ではより大規模な失敗書き直しが進行中だったし、その後転職した中小零細二社でもやはり書き直し失敗事例を目にした。書き直しの失敗は珍しくないし、そこからリファクタリングの価値を見出すのも自分たちの年代の同時代性かなと思う。書籍 &amp;ldquo;Refactoring&amp;rdquo; の初版は、自分が学生だった 1999 年に出ている。
一方、今まで一番熱心に仕事のコードを書いたのもその失敗書き直しだった。自分は当時ガラケー組み込み向けブラウザの SVG レンダラを開発していて、前任者から引き取ったコードがあんまりだったので書き直しを決めたのだった。（上司が阻止しなかったのは今思うと不思議。）オブジェクトモデルからラスタライザまで全部書き直し。朝から晩まで新しいデザインについて考えて、晩から朝までコードを書いていた。若かったのもあるし働きすぎて精神衛生を損ねたりもしたけれど、自分でぜんぶやる万能感は熱意に繋がっていたと思う。
今の会社でやっている仕事に、そういう熱意や責任感はない。真面目に働いてるけれど、他人のコードへの達観が根にある。例えば TL になって自分に責任が降ってきたらどうかというと・・・あんまり嬉しくないな。世の中の後任 TL はちゃんと責任とってて偉い。
板につく妥協 仕事への責任感とかは選択の問題でもあるので置いておくとしても、リファクタリングような連続的、漸近的なソフトウェア開発の様式をメンタルモデルのデフォルトとして受け入れることで失われるもあると思う。具体的にいうと、自分は理想のコードのデザインを考えなくなってしまった。
漸近的な改善は、デザインを現状との差分として考える。そうである必然性はないが、少なくとも圧力はある。あるべき理想を考え、その理想に至る長い差分の連鎖を探求するには実力が必要。実力がないとカッとなって書き直しというショートカットをするか、遠くの理想を諦め手近な改善で妥協する。後者は局所最適になってしまう。
漸近的な改善ばかりやっていると、アーキテクチャ全体への理解もさぼりがち。目につく範囲の不便を解決していくだけで仕事になるので、end-to-end のアーキテクチャをわざわざ学ばない。こうして理想への距離がまた一歩遠のく。
たとえば自分がある時期まで専門家みたいな顔をしていたウェブブラウザ、その全貌を理解していたかというと、してない。WebKit/Blink というレンダリングエンジンのレベルですら理解は曖昧だった。今のカメラアプリに至っては現像パイプラインのコードなんてほぼブラックボックスで、ぜんぜんわかってない。読んですらいない。（論文だけ読みました。) それでも仕事になる。むしろさっさと成果を出したいなら悠長に他人のコードとか読んでられない。
書き直しは逆だ。アーキテクチャの探求や E2E での理解を強制される。もちろんこちらにも限界があって、つまり俯瞰はできたが解像度が低いなんてことはよくある。書き直して無駄な複雑さをぶっとばそうとする素人書き直しは概ねこの低解像度に起因している。とはいえ漸近志向では目をそらしがちな視座を持てるのもまた事実だと思う。
理想的にはこんな風にできるとよい: 眼の前にある問題から数歩さがって全体を俯瞰し、ソフトウェアのあるべき姿についてよく考える。その理想に近づける現実的で漸近的な道筋を描いて仮説をたて、その仮説を検証するようにコードを一歩づつ書き換えていく。&amp;ldquo;Think big, act small&amp;rdquo; ってやつ。
これが難しいのは理想までの距離の長さだけでなく、その道程に山や谷があるからだと思う。理想に近づく過程ではしばしば局所最適から外れる必要がある。道から外れて暗闇を歩く苦しさや見通しの悪さに怖気づき、心やテストが挫ける。あるいは周囲を説得しきれない。
夢のある書き直し 自分の勤務先、前代の無茶振り社長がいなくなってから Moonshot という言葉をあまり使わなくなった気がする。代わりに最近、チームの PM が Roofshot というのを聞いた。月にいかなくてもいいから屋根には登ろう、みたいな。「書き直しではなく正しいエンジニアリングの力で漸近的変更を通じ谷と山を越えて行こう」という主張とも理解できる。でも谷には狼、山には熊がいるのを自分たちは知っている。何も考えず空に向かってポンコツロケットを飛ばしていたかつての無謀さが少し恋しい。
自分が仕事で手伝ってきた製品は今のところ消滅していないので、結果としてポンコツではなかったロケットたちだと言える。そして、よく考えてみるとこいつらはどれも書き直しである。Chrome というブラウザは転職してきた Firefox 関係者たちがはじめた書き直しだし、今やってる Pixel Camera はスタンフォードの教授が乗り込んできてはじめた書き直し。電子書籍リーダーは買収された電子書籍会社の面々による書き直しだった。
激しい生存者バイアスをスルーしつつこいつらがうまくいった理由を考えると、まず彼らは和良氏のいう俺 TUEEE 二周目勢だった。つまり一周目をきちんと走り、問題を理解していた。
そして、一周目で叶えられなかった大きい野望を持っていた。ブラウザではプロセス分離による高性能化、強力なセキュリティや切り離せるタブなど。カメラでは RAW にアクセスできる API の上に載せた compuational photography による超高画質の現像パイプライン。電子書籍はそういうテクニカルな超越は特にないと思うけど、それでも電話機に最適化した電子書籍アプリのビジネス的な需要はあっただろう。そういえばたびたび話に出てくる Rui-san のリンカも、単に書き直すだけでじゃなくて毎回バーンと速くなっている。
振り返ると今の自分は「一周目をちゃんとやる」を全然できていないし、昔の自分にしても大きな野望はなかった。自分にとっての書き直しは、「コードのデザインからゴミをなくしてメンタルモデルと表現を一致させること」に過ぎず、野望の礎ではなかった。コードの綺麗さは当時の自分にとってすごく重要なものだったので正当化していたが、説得力が足りない。コードのミタメばかりを気にして、そのコードで何を成し遂げるかを全然考えていなかった。それが自分の限界だったのだと思う。
こういうバーンとした書き直し、表面的には古典的 Second System Effect そのものにも思えるけれど、何か違いはあるのだろうか。Feature creep 的に機能を増やすのではなく根本的なアーキテクチャを刷新するところが違う・・・のかな？あるいは結局、単なる生存者バイアスなのかもしれない。自分はバーンとやった人たちが生き延びたあとからノコノコ参加しただけなので、本当のところはよくわからない。</description>
    </item>
    
    <item>
      <title>書き直しイクナイ</title>
      <link>https://messagepassing.github.io/020-rewrite/05-jmuk/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/020-rewrite/05-jmuk/</guid>
      <description>書き直しには自分も悪いイメージしかない。できれば避けたい。自分の関わった製品で、書き直したいとか一からやり直したい、みたいな欲求もほぼないなぁ。
モバイルトランスコーダのはなし ふと思い出したが、かつて書き直しプロジェクトに巻き込まれて嫌な目にあったことがあった。むかしむかし、モバイル向け検索チームではモバイルトランスコーダの書き直しというのをやっていたのだった。
昔のフィーチャーフォン（i-modeとか）に搭載されていたのは完全なHTMLはサポートしてない簡略化されたブラウザだったので、ふつうにウェブ全体から検索をして検索結果を提示しても、結果ページはそのままではユーザには読めないこともある。そこでウェブ検索の結果のページを解析し、変換して見えるようにするという技術が当時は開発されていて、いろんな会社がそういうのを作っていた。グーグルも社内製品があったんだけど、それを既存なアドホックな解析によるトランスコーダからWebKitベースに書き換えるというプロジェクトがあり、それに巻き込まれたのだった。
これはいくつかの要因が重なってまあまあ大変なことになっていた。詳細はあんまり書けない気がするが、かんたんに言うと、たとえば最初のリリースではfeature parityが整ってなかった。もちろん全部のビットを立てる必要はないとはいえ、どの機能は必須でどれがそうでないか、それらの優先順位はなにか、ぜんぜん誰もきちんと管理できていなかった。またコアチームはアジア圏におらず、しかし当時のモバイル検索の主戦場はアジア圏（というかほぼ日本）だったために、チームのやりたいこととやるべきことの齟齬があった。あと私個人がコアチームのTLとそりがあわなかったってのもあった。
まあ最後はさておき、そういういろんな不幸が重なって大変だった。あれは私の「書き直しイクナイ」という信念を強く強化したと思う。ただ補足をすると、その後コアチームが解散されて別の人たちが開発を引き取り、最終的にはどうにかなったと記憶している（わたしはその前に逃げ出したので関係ないけど）。それに技術的にも正しい方向だったし、新しいバージョンだったからこそできる機能（JSの実行結果からレンダリングするとか）もあった。でもまあ、書き直しの良し悪しというのはそれだけではないなというふうに思った（今にして思えばプロジェクトマネジメントがなってなかっただけかもしれないが……）。
IME経験とGoogle日本語入力 Ruiさんがリンカを何回も作っているように、同じものを何度も作って、細かいことまで詳しくなって専門性が高まって、みたいなものにはあこがれる気持ちもある。自分もそういう感じではないなあ。
この点についてはそういえば、Google日本語入力チームにはIME開発経験のある人が妙に多く集まっていた。工藤拓さんなんかは何度もラティス構造やViterbiアルゴリズムの実装を書いたと言っていてかっこいい。小松さんも（一応私も）IMEの開発経験は多少はあったし、Anthyの作者の田畑さんもいた。Google日本語入力のアーキテクチャ（サーバプロセスとクライアントプロセスに分かれる、ただしサーバプロセスもユーザと同じ権限で動く）などはサーバプロセスがrootで動いていたWnnなどの設計やライブラリとしてリンクされるAnthyなどの経験を踏まえたうえでの設計だったし、経験のある人達による再挑戦という面もあった。ただわたしは自分の経験とはあんまり関係なくMac版の開発とかをやってたし、私としては同じものを何度も作るという感じでもなかったな。
部分書き直し 部分的な書き直しや置き換え、コンポーネントの刷新、という意味ではよくあることだし、そちらはふつうにうまくいっているものも多い気がする。たとえばChromiumのビルドシステムはSconsだったのをGYPという独自のビルドシステムに置き換え、さらにGNというまた別なものに置き換えた。ChromeOSは最初にデモがあったころ（2010年ころ）にはX11/Gtk+ベースだったが、gtk+は早々に消され、のちにX11もなくなってすべて独自実装に置き換わった。ブラウザUIはけっこういろんな書き換えがしょっちゅう起こっている。UI revampみたいなのはよくある。
これってkzysさんのいうようなデスクトップアプリvsサーバサイド、みたいなことではないような気がしている。Chromiumは部分書き直しはしょっちゅうだから。ソフトウェアのつくり、リファクタリングしやすい設計かどうか、みたいな話でもあるように思う。部分書き直しができるような構造になっているソフトウェアはいいっていう話なんじゃないかな。
 kzys 確かに、デスクトップアプリ vs サーバサイドというのは良くなかったですね。
ただ、アーキテクチャの良し悪しとはまた別に、大企業勢は人手が集められることが前提に、Joel Spolsky とかは人手がないことが前提にあるように思います。「書き直しするのでヘッドカウント増やしたらインターナルトランスファーが結構きました」と「書き直しするなら、他のところは一瞬手薄になりますよ? そのリスクは本当に背負えますか?」との溝というか。
  jmuk ヘッドカウントはたしかにそのとおりですね。会社が小さいと書き直しは社運をかけたプロジェクトになってしまう……   omo Netscape は 2002 年に 2500 人くらい従業員がいたらしい。ブラウザ作るだけなら足りそうだけど、他にもしょうもないことを色々やってたからブラウザチームはもっと小さかったのだろうね。500-1000 人くらい？ そんだけいりゃ十分でかい気もするけれど。   karino2 MSのOfficeチームにいたJoelをつかまえて大企業じゃない事前提ってのはあんまりな主張では。 この話の発端のエントリでリンクしているThings You Should Never Do, Part I – Joel on Softwareで挙げている例も小さい企業の例って感じには全く見えないし… まぁここに居ない人の真意を語ってもしかたない気はしますが。
モバイルトランスコーダ、以前SharaPointの似たようなのを担当していたのが同じチームに居たのですごい聞き覚えのある話だ…
  </description>
    </item>
    
    <item>
      <title>失敗する書き直し、成功する書き直し</title>
      <link>https://messagepassing.github.io/020-rewrite/04-karino2/</link>
      <pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/020-rewrite/04-karino2/</guid>
      <description>全体的な事を言えば、自分は書き直し反対派と思う。 morritaさんの言う20年前の意見をほぼそのまま現代まで持っている。 頭の硬い古い老人という事だろう。
そういう訳で、そんな古い側の人間が書き直しについてどんな事を思っているのかを書いてみたい。
失敗するケースは割と限定されている ソフトウェアの書き直しには、成功するものと失敗するものがある。 失敗する条件を厳密に挙げるのは難しいけれど、失敗する書き直しは、自分は見れば分かる、と思っている（本当に分かるかは議論の余地があるけれど）。
まずshinhさんの言っている半分素人が挑戦するケースは良く見かける。これはまぁいい。全然良く無いけれど。
それ以外で良く失敗するのは、ある程度の規模、だいたい10万行以上のソフトウェアで、 その時点で多くのユーザーを持っていて、 書き直しにかなりの時間と人がかかる奴が多いと思う。 そしてデスクトップ、iOS、Androidなどのアプリで作りがモノリシックである必要がある類の物と思う。
書き直し、という場合、自分が想定するのは、スクラッチからの書き直しで、途中でやめられないもの。 ある程度まで進めないと全く価値が無いソフトウェアコンストラクションを書き直し、と思っている。 パーツずつ置き換えていって最終的に全部が置き換わる、というのは、 上記の10万行以上の書き直し、とは思わない。 というのは、ある程度規模のソフトウェアについてパーツずつ置き換えていく場合、ほぼすべてのケースにおいて、 最初は全部置き換えようと思っていても、 10万行以上のかなりの部分は書き換わらず残るからだ。それは書き直しという言葉とは合わないと思っている。
また、それらの条件を満たしていても、書き直す元が何らかの理由で使えないものは比較的うまくいく。 例えば昔書いた事があるがそれは別の会社でそのソースは手元に無い、みたいな場合とか。 書いている人間にとっては書き直しだけれど、その会社にとっては新規開発。こういうのは割とうまくいく。 会社が同じでも、例えばWindows版があるがweb版が必要になった、みたいな、 大きく環境が変わるケースでも書き直しはうまくいく事が多い。 この場合も新規開発に近い。
うまく行かないのは現行ユーザーがいて、メンテナンスもしていて、 それをいじるとたくさんバグが出たり多くの案件に影響を与えてしまうから、別途ゼロから書き直す、みたいなもの。 書き直さないという選択肢がある状態で書き直しを選ぶものが、良く失敗する。
逆に言えば、失敗するケースというのは結構限られている。 規模が小さければそもそもそんなに失敗しないので、構造的に小さく置き換えていけるなら失敗はしない。 kzysさんの言っているのもこれに近いと思う。
規模が大きくても、手元に開発を続けているものが無い書き直し、 例えばkzysさんのcontainerdとかshinhさんのkatiとかも上記の条件とは合わない。
そう考えれば書き直しで失敗しないものは多い。 ではなぜ自分は書き直し反対原理主義なのか？
失敗するパターンの書き直しに失敗する時の被害は、すごく大きい 失敗するパターンは結構限られていて成功するパターンが多いのだけれど、 失敗パターンは失敗すると、被害が凄く大きい。そして成功パターンのメリットは大してない。この非対称性が、失敗の方を誇張したくなる理由の一つ目。
失敗するパターンは既にユーザーがたくさんついていて、しかも書き直したくなるほどにアクティブに変更が加えられている、という話をした。
そういう状況で書き直しという選択をすると、しばらく更新が無くなる。 その間に業界の状況は変わり、たくさんいたユーザーを失う、という事が良く起こる。 そして一旦失われたユーザーは、元の開発に戻しても取り戻す事は出来ない。
失敗するパターンは、被害が大きいパターンでもあると言える。
一方でスクラッチから書き直してもうまく行くケースで、書き直さずにインクリメンタルに変更していっても、実際デメリットはあまりない（メリット、デメリットは後述）。
失敗パターンに巻き込まれるのは、すごく辛い 失敗パターンでは、「自分はこのケースは失敗するという確信を持っている」が、回りは「自分は今回はうまくいくことが分かっている」と思っているケースは良くある。 そういうケースでは自分は早々に撤退するので当事者として被害を受ける程では無いけれど、 本当に多くの物を失うのを割と近くで見る事になるのでとてもつらい。 しかも何度も同じような事を言って同じように失敗していくのを見ると、何やっても結末の変わらないループ物を見せられているような気分になる。辛い。
割とベテランで普段はまともな判断をしているプログラマでも、書き直しの失敗パターンは全然分かってない事がある。 プロジェクトのステークホルダーの多数派がイケると思っていると、書き直しを止めるのは難しい。
こういう辛い思いを何度かすると、もっと書き直しには失敗するパターンがあるというのを広く皆に知らしめて、 もう同じような不幸な出来事が二度と起こらないようにしよう、という気分になる。 長々と失敗するケースとかをいろいろ説明するのも大変なので、 原則書き直しは全部無しって事にしておこうよ、と言いたくなる。
この失敗するケースが他のプログラムのプラクティスに比べると広くは共有されていない所が、失敗の方を誇張したくなる理由の２つ目。 特に共有されてないせいで止められなかった苦い経験を何度か持つと、書き直し反対側に大きく振れがちなんじゃないかと自己分析する。
以下ではこの共有されてないと自分が思っている事について、いくつか書いてみたい。
変更出来ないから書き直すという間違い 多くのユーザーがついたり多くのプロジェクトで使われたりして、 大きく育ったソフトウェアには、良くバグる複雑な所、というのが出来上がる事がある。 これは少しいじると様々にバグったり、自分が把握していないようなプロジェクトで意外な影響が出たりして、 ここをいじるのはすごくリスクが高く、難しい、と感じる。 何度かいじっては痛い目にあって、だんだんとそこをいじる事に臆病になる。
こういう時に、もう変更は出来ないのでゼロから書き直したい、というのが良くある誤りのパターン1に思う。
多くのプロジェクトやユーザーで使われ続ける状態で大きくいじるのが難しいからといって、 多くのプロジェクトやユーザーで使われないようにしていじる事はできる。
つまり、良くある誤りとして、選択肢は以下の２つと勘違いしているが、
 ユーザーやプロジェクトで使われてる状態でいじって大きな被害を出す 新しく書き直す  本当は選択肢は３つある、という事だ。</description>
    </item>
    
    <item>
      <title>二周目ならば俺 TUEEEE がしたい</title>
      <link>https://messagepassing.github.io/020-rewrite/03-kzys/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/020-rewrite/03-kzys/</guid>
      <description>Joel Spolsky の Things You Should Never Do, Part I はデスクトップソフトウェアの文脈を感じるなー。とはいえ最近 Janna Dogan が Twitter でその記事を枕に、
 We do tens of thousands if not not hundreds of thousands successful rewrites at this scale as an industry every year. Requirements change, tech stack change, dependencies change, our understanding of the problems change. Rewrites are not just inevitable, it&amp;rsquo;s the part of the job.
 という話をしていたので、やっぱりまだ影響力はあるのかな。
手元のマシンで動かすデスクトップむけのソフトウェアと違って、サーバーサイドだと、新旧のバージョンを混在させて、ランダムに出し分けしながら、段階的に新しいバージョンの割合を増やしていく、とかが簡単なので、書き直しのリスクはそれなりに下げられる。その結果か、社内では色々な書き直しを見かける。新旧のバージョンが一つのサービス小さく混在していることもあれば、新バージョンが新しい別のサービスを呼び出すこともある。morrita さんは
 Microservices のような大規模インターネットソフトウェアのリファクタリング・パターンも広く知られるようになった。
 なんて書いているけれど、新バージョンが新サービスだったりすると、そのサービスを受け持つチームからすると、それはリファクタリングというよりは書き直しに近い。</description>
    </item>
    
    <item>
      <title>書き直しの記憶</title>
      <link>https://messagepassing.github.io/020-rewrite/02-shinh/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/020-rewrite/02-shinh/</guid>
      <description>書き直しの記憶 書き直し、痛快な成功例も、なんだかなあな失敗例も見たような気がする。失敗例はこう、オリジナルの複雑さが何故存在してるかを理解せず、「現状のものはややこしすぎる、書き直してシンプルにする！」と半分素人みたいな人が挑戦したケースであることが多いように思う。オリジナルの複雑さは長年の実用にさらされて育ってきた、意味のある複雑性であることも多く、シンプルさを売りにして作ってみたものの、機能も性能もいまいち……などとなるパターン。
森田さんも触れていた、 Netscape, Mozilla, Firefox, WebKit, Chrome などのブラウザ群は、苦しみはありつつも、ある程度以上にうまくいった、非常に大きな規模の書き直しだと思う。これらは中心になってるメンバーに、ブラウザ界のヌシ的な、なんだかずっとブラウザやってる人みたいな人達がいて、その人達が過去のプロジェクトの理解を元に、シンプルにできるところはしつつも、複雑性を受け入れるべきところは適切に受け入れるような、適切な設計をしたという面があるのではないかな、と思っている。
コード量で言うと 1/1000 以下の、はるかに小規模な例だけど、僕が書き直しをやってみた例として、 GNU make をある程度再実装した、 kati というのがある。これは始めてみると想像していたよりはるかに GNU make の仕様がヤバかったというのがあり、まさに「現状の複雑性をまるで理解していない素人」だったので、蛮勇の類だったように思う。 kati はある程度うまくいったのだけど、これはなんというかラッキーで、現状の複雑な仕様をある程度捨てても、それなりに実用的なラインまで持っていけるプロダクトだった、ということなのかな、と思っている。
自分が過去に作ったものを書き直す話 書き直し、いろいろな対立軸があるのかな、と思う。小さい書き直しと大きな書き直し、うまくいくケースとうまくいかないケース、森田さんが書いていたようなリファクタリングが良いケースと書き直しが良いケース、など。このへんも面白いトピックだと思うんだけど、個人的に気になる軸として、他の人が作ったものを書き直す場合と、自分の作ったものを書き直す場合があると思う。
僕としては、あまり自分が過去に書いたものを書き直す、というところにモチベーションを持ちにくい。なんかもう一回やればもうちょっとうまくやれるだろうな、などとは思うんだけど。ざっと思い返すと、プログラム言語を学ぶ時の小規模だけど非自明な習作として、オセロを4回くらい書いたくらいかな。あとダイナミックローダは名目や規模がそれぞれバラバラなので、あまり書き直しという感じもしないけど、4回くらいいじったことがある気がする
得意なことをさらに得意にして、より良いプロダクトを作る、という動きの方が、おおげさな言いかたをすると人類に貢献している気がしている。僕としては、あまり人類に貢献したいみたいな気持ちはないんだけど、なんとなく一つのことを極める方がカッコ良いような気がする気持ちがある。ブラウザ界のヌシみたいな人のエピソードで記憶に残っているのが一つある。その人はすっごい有能で、みんな意見を欲しがっている。だけど、ブラウザ標準カンファレンスであるところの、 w3c になんか来ていない。来るって言ってたはず、らしい。とはいえ彼の意見がないと結論に自信が持てないから、 skype かなんかでつないで、むっちゃ音質悪いのを、みんなで必死に何を言ってるか聞きとっている、みたい状況になった。いや偉い人だからってその態度はどうなんだ……ともちろん思うんだけど、現場に来てなくてロクに議論を聞いてないにも関わらず、みんなが意見を求めざるを得ない圧倒的専門性には、こう、いやすげーなと
そういう、一つのことを極める系の動きにモチベーションがわかないの、ちょっとコンプレックスだったんだけど、ここ5年くらいは、まあなんか違う種類の人間だよなってことで気にならなくなっている。なんかでも、一つのこと極められる系の人たちは、どういう気持ちの持ち方なんだろうな、ってのは結構気になる。 ruby のなかださんとか、もう生活の一部なんだろうけど、何食べたらああいうことが可能になるんだろうか……とか。それ以外だと同じく ruby ずっといじってるささださんとか、リンカ書き直し回数が Ian Lance Taylor の 3 回 と並んで人類最多になってそうなうえやまさんとか。
他人が作ったものを書き直す話 一方で、僕も、他の人の書いたものを書き直すのは、それなりに食指が動く。ただなんか、あまり現実的にやりたいネタがないのが今日この頃。いや、デバッガ、 C++ コンパイラ、エディタ、あたり自分で書いてみたいな……と思ってるんだけど、これらは規模が大きすぎて、現実的に完成する気がないし、すごくパッションがあるわけでもない
というわけで、個人的な趣味嗜好を中心に書いてみました。ところで、森田さんはこのトピックを提案した時の最初の発言で
 仕事でも趣味でも、書いたりかかわったりしたコードのなかに書き直したいなーというものはありますか。 自分は昔はあって、今はなくて、合ったほうが良いなーとおもっている（野心として）。
 と話をふってたんですけど、森田さんの話は森田さん自身のパッションの話がないなーと思った。そのへんどんなもんですかね？というのを聞きたい気がする。ブラウザ作りなおしたいとか、ないものですかね
 morrita Kati は Android ビルド用 Makefile をターゲットにしていたわけですが、その Android は Bazel への移行計画を表明しており、おまえら正気かい・・・ Soong は Jack/Jill に続いて失敗したわけだがまだやるのかい・・・みたいな気分になりました。それはさておき お返事は別に書きましたのでご笑覧ください。   </description>
    </item>
    
    <item>
      <title>Rewrite Obsession</title>
      <link>https://messagepassing.github.io/020-rewrite/01-morrita/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/020-rewrite/01-morrita/</guid>
      <description>「ソフトウェア書き直し」の是非はなぜか目の離せない話題(1, 2, 3)で、その手の話があるとつい読んでしまう。自分は仕事では別に書き直しを決断できる立場ではないし、余暇でも特に書き直すソフトウェアがない。他人事。なのに目が離せない。オブセッションと言っていい。なので数年に一度は心の中のリライト話を吐き出して精神の平安を取り戻したい。今日はそんな日です。
Things You Should Never Do インターネットのプログラミング・サブカルチャーに「書き直し・ダメ・絶対」というミームを持ち込んだのは、今からおよそ 20 年前の 2000 年に Joel Spolsky が書いた Things You Should Never Do, Part I – Joel on Software だと思う。(日本語訳は本になっている。昔はインターネットでも読めた気がするんだけど。) これは Netscape という会社が書き直した主要製品 Netscape Navigator に関する話である。同社はブラウザをフルスクラッチで書き直し、でもその出荷が遅れに遅れ、競合の Internet Explorer に市場を明け渡すことになった。結果として Netscape という会社は傾いて、数年後には買収され、なくなってしまった。残念でしたね。やっぱり書き直し良くないですよね。やめといた方がいいですよ、書き直さなくてもアーキテクチャとか直せますから・・・とまあそんな話だ。
当時の人々はこれを読んでわりと説得され、書き直し良くないな・・・とか思ったりしていた。時代の流れもあった。書き直しの主要な代替であるリファクタリングを世に広めた Martin Fowler の書籍 Refactoring の出版が 1999 年。ちょうと世の中のプログラマが「クソコードを書き直さなくても心を病まずに済む方法があるかもしれない・・・」と気づきはじめた頃だった。
逆に言うと「リファクタリング」という行為は今ほど当たり前ではなかった。だから Joel の主張にも新鮮味があった。
先の要約は実はちょっとウソがあった: &amp;ldquo;Things You Should Never Do&amp;rdquo; は Netscape が Netscape Navigator のベータ版配布をはじめた時に書かれている。つまり Netscape が潰れる前に書かれ、期待の新バージョンにめっちゃ水を差している。世の中（サンプル数 1, つまりわたくし) はこの新バージョン Netscape Navigator をすごく楽しみにしていた。なんか UI もかっこよくなったりして、こいつはすごいことが起こりそうだぞ今のところバグだけでクソ遅いけど・・・みたいな気分だった。そこに Joel は「クソ遅くてバグだらけなのは書き直しだからだよ」と数年後の崩壊を予言したわけで、先見の明ある慧眼記事として人々はそのあとしばらく読み継いだわけ。</description>
    </item>
    
  </channel>
</rss>
