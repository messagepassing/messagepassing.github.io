<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>助言のはなし on Message Passing</title>
    <link>https://messagepassing.github.io/019-advice/</link>
    <description>Recent content in 助言のはなし on Message Passing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://messagepassing.github.io/019-advice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ハッカーと画家</title>
      <link>https://messagepassing.github.io/019-advice/04-jmuk/</link>
      <pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/019-advice/04-jmuk/</guid>
      <description>そもそもあんまりそういう助言というものをもらった記憶がないなあ。人の話を聞かないタチで聞き流していたのかもしれないが。
英語で書くか、日本語で書いてから翻訳するか 英語よりも日本語……という話で思い出したけど、大学院生のとき、英語で文章（論文とか）を書くときの指導として「なるべく最初から英語で書いてなれたほうがいい」という指導と、「日本語でまず書いてみて論理構成を検証するべし。それから英語に訳すといい」という指導があるようにおもう。で、自分はわりと後者を聞かされていたが、これは誤りだった……というと語弊があるが、自分には合わなかったな、という結論をえた。
後者の意図はわからなくもない。構成がしっかりしているか、話の理路がたっているか、をただしく検証するべし、というのはただしいし、英語が苦手な状況でいきなり書き始めても語学力の低さに足を引っ張られてそういうことがうまくできないことがある、というような話だったと記憶している。それはたぶん正しい。でも日本語で書いてしまってから英語に書き直そうとすると、どうしても日本語の言い回しに引きずられることがあるので、あんまりうれしさがないというのが自分の感想だった。構成とかは、文章で書き下すのではなく、もっと別な方法で検証するのがいいんじゃないだろうか。それよりは英語の論文を読んだりして、言い回しをまねたりして書いていくのがたぶん速いし、上達も速いんじゃないか、という気がする。
その後外資系に就職して仕事のコミュニケーションがもっぱら英語のみになると、まあ日本語で書いて訳すとかやってらんなくなる。そうやって考えると、英語で書く機会が少ないような、そして英語が苦手な学生に対してだけ一時的に有効なテクニックなのかもしれない。でもけっこう世に見られる指導な気もする。まあどっちみち検証されたなにかではないので、個人の感想の域を出ないわけだけど。
外資系はすぐクビになるという話 karinoさんが挙げているこれも、そういえばよく話に聞いていた気がする。実際に入ってみればそんな簡単にクビになることはない。いやまあローパフォーマーがクビになるとかあったりするだろうが、それでもなぜか世の中に出回っているような、異様な気軽さでクビになることはないだろう。そういえばQuoraにもこういうタイプの質問がたくさんあり、そのうちのひとつにわたしはマジレスしたことがある。ただ、こういう質問へのほかの生々しい回答（たまにある）を見ると、まあ職種や業態による面もあるのかもな、という気はする。会社のカルチャーもある程度は関係していることだろう。が、すくなくとも自分の体験としては、そうホイホイクビになるわけでもない。プログラマは専門職で替えが効きづらいし、クビにしてもあたらしいやつを見つけるのも大変だしね……。
Lispをなぜ学ぶか もうちょっと技術者っぽいネタも入れておこう。
自分が大学院生のころにポール・グレアムの文章がはやっていて、自分も『ハッカーと画家』買って読んだりして大いに影響をうけた。さて有名な「普通のやつらの上を行け」には、エリック・レイモンドの「ハッカーになろう」（これも学生時代に読んだなあ）を引用する一節がある（ところで「ハッカーになろう」、地味に改定が進んでいていつのまにかJavaじゃなくてGoを勉強しろってなっている。邦訳も追随しているのはすごいしえらい）。
  LISPは、それをものにしたときのすばらしい悟り体験のために勉強しましょう。この体験は、その後の人生でよりよいプログラマーとなる手助けとなるはずです。たとえ、実際にはLISPそのものをあまり使わなくても。
 これはまるでラテン語の勉強について語っているみたいじゃないか。ラテン語を勉強しても就職には役に立たない(まあ、古典の教授を除いては)。でもそれはあなたの心を豊かにし、英語なり何なりの実際に使う言葉をよりうまく使えるようになる。
でもちょっと待った。このメタファーをそこまで敷衍していいのか。ラテン語を勉強しても職が無いのは誰もそれを話さないからだ。ラテン語で何か書いたって、誰も読んじゃくれない。でもLispはコンピュータ言語だ。コンピューターは、何であろうとプログラマが選んだ言語を話すんじゃないか。
 さて、わたしはポール・グレアム派だったので、Lispがいい言語なら使うのがいいというのをそのまま受け入れていたし、Lispはパワフルなすごい言語なんだ、というのを真に受けていた。が……けっきょくこの年になっても、仕事でLispを書いたことはないし、趣味でもそんなにLispをやってはいない。すごい言語ではあるだろうけれど、使う機会はなかったし、今後使いたいかというと、そうでもない気もする。今では私はエリック・レイモンドの言説に軍配を上げる。
ポール・グレアムが間違っていた、というよりは、それよりは書かれた文章が時代を反映しているという話なんじゃないかという気がする。エリック・レイモンドが「ハッカーになろう」を書いたとき、書いたコードはだいたい、使う場所にインストールされるようなものだったんじゃないか。そういう世界だとLispで書いたプログラムよりは、どこにでもあるようなPerlやPython、あるいは微妙な環境の違いを吸収しつついろんな環境でビルドできるCやGoなんかがいい、という話になる。いっぽう、ポール・グレアムが「普通のやつらの上を行け」を書いたとき、念頭にあったのはサーバプログラムだった。クライアントからはブラウザなりなんなりでアクセスできればよく、必要なプロトコルをしゃべれればサーバの実装言語は比較的自由がきく。だからLispみたいな言語で書くのがいいんだという。
ところがいまはまた状況が変わってきていて、この言説の正しさを脅かしている。具体的には、
 サーバサイドのソフトウェアは大規模化し、フレームワークの重要性が上がった。必要な機能をふくむフレームワークを作るのは大変で、サーバサイドで使う言語は人気があってちゃんとメンテされたフレームワークのある少数の言語に集約されてきた 一方クライアント側（フロントエンド側）もそれなりにちゃんと作らないといけなくなって、そこでまともに使えるプログラミング言語は限られている（Java / Kotlin / Swift / Javascriptなど）  サーバ側については、マイクロサービス・ポリグロット化が進んで言語選択の自由度が上がる機運もあった。が、けっきょくあんまりにも多様すぎるとメンテ不能になるので、プログラミング言語は多種使えるにしてもそこそこの数に絞るのが普通という方向性になってきている気がする。そうやって時代の変遷を経て、今はまたエリック・レイモンドに分があるフェーズに来ている。
今後また揺り戻しはあるだろうか？　フロントエンド側はウェブならたとえばWebAssemblyが発展し、バックエンド側はコンテナ化・サービスメッシュ化によって、なかで動くプログラミング言語の自由度が高まる可能性は、まああるかもしれない。でもまあ、それでLispが復権するかは疑問かなあ……。
ところでそもそも今でもLispってやったほうがいいの？　なんで？　というのも悩ましいところ。ここでいう「悟り体験」ってどのレベルの話なんだろう。関数プログラミングという程度の話なら、ほかの言語のほうが今はむしろいいのかも、とすら思う。が、たとえば『On Lisp』（これもポール・グレアムだ！）でも読んで勉強してみれば、おもしろトピックがほかにもあって楽しめるし啓発されるしいいことあるんじゃないの、とは思っている。
 morrita 2017 の SO のサーベイで トップ週末言語 の座を獲得した Haskell にくわしいむかいさんが Lisp にそんな悩ましい気持ちを抱えてるとは意外ですね・・・。傍から見ると関数型の親分を履修済みということで終了なのかと思ってました。それにしてもこの SO のサーベイには Rust, Go, Swift, Kotlin など昨今の人気言語の影も形もなく時代を感じる。
時代背景という意味では Paul Graham が Lisp を勧めたのと同じ時期 (2004) に書いた The Python Paradox を読むと当時の時代背景がわかるのではないでしょうか。
 I didn&amp;rsquo;t mean by this that Java programmers are dumb.</description>
    </item>
    
    <item>
      <title>助言と向き不向き</title>
      <link>https://messagepassing.github.io/019-advice/03-morrita/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/019-advice/03-morrita/</guid>
      <description>自分もかずよしさんと同じで、助言とか説教とかあんまり覚えていない。たぶん中二病で天邪鬼だから他のひとのいうことを聞きたくないのだと思う。好みにあわない説教は目がスルーする修正があるので記憶に残らない。アドバイスに一応従ってみている有野さん（若いバージョン）偉いね。
などといいつつ割と権威主義な人間でもあるので、本とかは割と真に受けたり影響を受けたものもある気がする。たとえば「スーパーエンジニアへの道」という古い本がある。 原題は Becoming a Technical Leader で、1986 年版。どういうきっかけでよんだのか忘れたけど(古の記録によると会社に置いてあったらしい)、二十台とかの若い頃に読んで、少しは影響をうけたか、少なくとも印象には残っておいる。その後も何度か繰り返し読んだ。（なお別に本書をお勧めしているわけではない。似たような題材のモダンな本も色々あるだろうし。）
(Not) Becoming A Technical Leader これを書いたのはワインバーグという技術コンサルタントとして名を馳せた故人で、これもそういう方向性の本である。つまり、自分の知見や洞察をいかにスケールするかという話が主眼。いかにもリーダーシップの本。若き自分はこういうのを読んで、自分もキャリアを進めるにあたりテクニカルなスキルだけでなくこういうリーダーシップスキルも高め、アーキテクトとかそういうかっこいい何かになるに違いないと疑いなく思っていた。
でも 20 年弱くらいして我が身を顧みると、リーダーシップ全然ない。若者の育成とかしてないし、特段やりたくもないし、コードも委譲とかせずなるべく自分で書きたいし、戦略的判断とか一ミリも下してないし、他人や組織に影響とか与えてない。与えずに済むなら与えたくもない。
自分は勤務先ではいちおう最低限のリーダーシップが求められるはずの階級にいるけれど、そこは先人たちが開発した様々なリーダーシップ拡大解釈技法を駆使して体面を保っている。でも本音としてはミーティングをさぼりがちな英語の出来ないアジアン中年にリーダーシップを期待しないでいただきたいッと思っている。この内心はしばしば漏れ出て上司にバレているが、他の頑張りと引き換えに見逃してもらっている（と信じている）。
出世のしなさとしたさ こういうことをいってると当然出世はしない。でも最近、クソ高い家賃の心配に加え子供の学費や NVIDIA の GPU やソニーのミラーレスが気になり（これを同列に並べるべきでないのは存じておりますのでそっとしておいてください）給料あげたいな、もうちょっと出世とかがんばった方がいいのかな、などと思って &amp;ldquo;Staff Engineer&amp;rdquo; という本を読んでみた。これは自分のような出世したいヒラプログラマに向けて先のワインバーグの本を現代の文脈で書き直したような、見も蓋もないことを言うとダイヤモンド社刊っぽい本。
先の本を読むのがめんどくさい人は、少し前に Dropbox が公開したソフトウェアエンジニアの出世目安文書が手短で参考になるだろう。Staff Software Engineer のセクションあたりを参考にされたし。ある程度以上の規模のテック企業は公開せずともどこも似たような文書を保守していて、内容も似たようなもの。
読んでみると、なるほどこういう頑張りで出世できるのね、たしかに勤務先の給料いっぱいもらってそうな人たちこういう仕事してる気がするね、とそれなりに説得力を感じた一方、自分にとってこの出世ってやつは給料が上がって偉そうにできる以外あまりいいことなさそうだな&amp;hellip;という思いが強くなってしまった。リーダーシップに伴う金と名声と引き換えにヒラプログラマとしての気楽な立場を失うことに、改めて抵抗がある。（勤務先の偉い人が金と名声だけを追い求めていると主張するものではありません。出世できない人のすっぱりぶどうビューとして眉唾のうえお読みください。）影響力も戦略的判断もしなくていいから、責任の重圧と沢山のミーティングやドキュメント書きもなくていいです・・・GPU やフルサイズのミラーレスは我慢します親としての責任感についてのコメントは控えさせていただきます・・・とか思ってしまう。先の Dropbox の文書も &amp;ldquo;I deliver multi-year, multi-team product or platform goals&amp;rdquo; だとか &amp;ldquo;When necessary, I am able to introduce change into the organization, help others understand the business case for change, and create excitement to drive adoption of the change&amp;rdquo; などミラーレスへの道の険しさを物語っている。</description>
    </item>
    
    <item>
      <title>自分が信じていたけれどそうでもないもの</title>
      <link>https://messagepassing.github.io/019-advice/02-kzys/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/019-advice/02-kzys/</guid>
      <description>人に言われたことはあんまり覚えていないんですが、自分で信じていたけれど、振り返ってみるとそうでもないものは結構あるかもしれない。
35才定年説: ないわけでもない 日本のプログラマ業界には「35才定年説」というのがあって、という話は昔に morrita さんが書いていたけれど
 定年説を事実として扱う文章は、主に転職斡旋業者が運営するサイトに見られる。一方で定年説を否定しようとするのは、主にプログラマのブログなど当事者のサイトだ。
 私は転職斡旋業者よりはプログラマのブログを読んでいたので、35才定年説というのは他人事だと信じていた。
それで、35才をすぎて周りを見渡してみると、結構プログラマをやめてしまっている人が多いことに気づく。一緒にチームで働いていた人々から、カンファレンスで見かけるようなスターまで、すっとマネージャーになっていたりする。
私自身はマネージャーにはならなかった。ならなかったけれど、一方で、結婚して外国に引越して子供ができて、業務時間後や週末に勉強会に行くようなプログラマからは「引退」してしまっている。仕事では5時でパッと終わらせて、趣味でたまにブログを書いたりするくらい。
35才、みんなが定年するわけではないけれど、周りを見渡したときに、ちょっと風景が変わってしまう年齢のように思う。
技術は好き嫌いなく: ローリスク・ローリターン 私は「プログラミング言語などの技術は適材適所で、好き嫌いなく学びましょう」というのを結構長らく信じていた。分散投資でリスクを低く、というともっともらしいし、CSS + HTML + フロントエンドの JavaScript + SQL + サーバーサイドの JavaScript 以外の言語を全てやって、はじめてやっと Web 2.0 っぽいソフトウェアが書ける、という時代だったことの影響も少しはあると思う。
ただ、今になって振り返ると、リスクの低い投資はリターンも低くて、自分がそれにどれだけ自覚的だったかというと疑問がある。仕事で使っている言語について、ブログを書いて、本を書いて、日本なんとかユーザー会に参加して、みたいに全賭けしてたらどうなったかなあと思うことはある。取らぬ狸の皮算用ですが。
あえていうなら、私は英語にまあまあ賭けていて、今はアメリカに住んでいる。こっちは現在進行形で、だいぶハイリスク・ハイリターンな賭けをしているなあと思う。
仕事でオープンソースできるのはスーパープログラマーだけ: そうでもない なんかちょっと寂しい感じになってしまったので、最後はちょっと良い話でも。
私の仕事は、結構な部分がオープンソースになっている。昔は、仕事でオープンソースができるのは、まつもとゆきひろさんとか平林幹雄さんとか、自分のソフトウェアがヒットした一握りのスターだけと信じていた。
しかし今は、オープンソースに対する理解であるとか、オープンソースなソフトウェアが増えた結果、仕事でオープンソースができる人の裾野はだいぶ広がったと思う。少なくとも大企業には結構オープンソースなプロジェクトがあり、Apple でプログラミング言語の開発に関わろうとしても、Microsoft でエディタをやろうとしても「仕事でオープンソース」が出来る。
もちろん、そういう大企業に入るのはそれなりに大変だけど「自分のソフトウェアをヒットさせる」なんて目標に比べると、ずっと手の届くはなしだと思う。
 morrita 言語じゃないけど一時期特定テクノロジに全賭けしていた経験でいうと、一時的には雑誌寄稿したりちやほや気分を味わえますが長期的にはたいしてインパクトないんじゃないかな。 もちろん長期的に全賭けしつづけたら別かもしれないけれど、そうできてるのって賭けがあたってる人だけだろうし。たいしてリスクもないけどリターンもない印象。
自分が作ったものに全賭けしてるなら別で、それが真のハイリスク・ハイリターン賭けだと思う&amp;hellip;という話を前に書きました。
  karino2 周りを見渡した時にちょっと風景変わってるというのは自分も感じますね。 web上でプログラムの発信をする同世代の人は随分減ったよなぁ。   kzys 「最初の会社でブラウザを書いて、紆余曲折あって、またブラウザを書いてます」というの、一貫性があるし、2個の実装を見比べてはじめて得られる洞察とかありませんか? いつか気が向いたら総決算をぜひ。
同世代の人々はちょっと減ってしまった気がしますが、プログラマは新規流入があるはずで、世代を気にせずに生きるのが平和かなあと思います。
  morrita 我々が新しい世代と仲良くしたいのはいいとして、新しい世代は我々と仲良くしたいのだろうか・・・。
そんなわけで Message Passing では一緒にガヤガヤしてくれる人を世代を問わず募集しています。
  </description>
    </item>
    
    <item>
      <title>若い頃言われたけど今考えてみると間違ってたあれこれ</title>
      <link>https://messagepassing.github.io/019-advice/01-karino2/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/019-advice/01-karino2/</guid>
      <description>新卒の頃、英語よりもまず日本語を勉強すべき、とか良く言われていた。
ふーん、そんなもんか？と勧められた「理科系の作文技術」や「日本語の作文技術」を読んでみたが 別段なにかを学びとる事も出来ず、日本語の勉強って良くわからんなと結論づけていた。
さて月日は流れ、年齢的にもだいたいキャリアの主要な成果を出しつつある。 ライフスタイル的にもセミリタイアのフェーズに入って随分経った。 だから自分のキャリアに何が必要だったか、一個人の体験としては結論を出して良かろう。
そうして振り返ると「英語よりもまず日本語を勉強すべき」に必要性はなかった。 英語の学習で助けられた事は多いし、英語の学習の不足で困った事も多い。 一方で日本語の不足で困った体験はあまり無い。 自覚がないだけかもしれないけれど、それは英語についても同じことが言える。 今回は、この手の「よく言われているし正しそうに回覧されがちだが自分の体験とは違った」ような事を考えてみたい。
免責: プログラマの仕事は多様である 各論に入る前の大前提として、プログラマの仕事はとても多様。一概には言えない事ばかりだ。
ある人がXが重要だったと言った時、それが重要でない人はきっとどこかに居る。 そして個人がどんな仕事を選ぶかというキャリアパスは人それぞれで、本人の性格や好みが決めるものと思う。 明らかにまずい方向性も無いでは無いけれど。
だから「Xが大切だった」とか「大切じゃなかった」という話が「一般には」正しいかどうかを論じる事にはあまり意味が無い。 それよりも一個人の経験、体験として何が世の一般論と違ったのかを皆で示し合う方が面白いんじゃないか。
自分の「正しくなかったアドバイス」 という事で自分の体験談を列挙してみたい。
 US系企業は給料は高いが成果を出さないとすぐクビになり、毎日厳しい フリーランスのプログラマは会社員よりも営業力が無くてはいけない 社会人は英語より日本語をまず勉強すべき プログラマはコーディング能力よりもコミュニケーション能力を身につけるべき  昔から良く言われているものもあるし、最近良く見かけるものもある。どれも自分の体験とはあってないなと思う。
外資系企業の厳しさ すぐクビになり、成果を厳しく求められる話は良く見かける。 ある程度正しい部分もあるとは思っているが、それよりも企業の景気の方がずっと重要なのは結構みんな同意してくれるんじゃないか。 不景気な日本企業は割とリストラとかあるし、成果も求めてくる事もよくある気がする…
フリーランスのXX力 「フリーランスはサラリーマンよりXXが出来ないといけない」系の話も、実体験とは異なる事が多い。
自分はフリーランスになってからほとんど営業とかしてないし、仕事を探した事もほぼ無い。でも仕事には困ってない。 身の回りにも仕事が無くて困ってるプログラマは全然見かけない。
フリーランスでも需給が小さい業種の状況は違うだろう。そのせいでプログラマのフリーランスの実態とは違う言説が出回っているのではないか。 少なくとも「サラリーマンより多くの事が出来ないとフリーランスはやれない」ことはないと思う。
英語と日本語の重要度 英語について。先にも書いたけど、それに加えて自分が新卒の昔と今では必要とされる能力にもだいぶ違いがあると思う。
当時は技術ドキュメントも技術書もよく和訳されていた。 でも現在は、少なくともiOS、Android周辺は公式からの動画での情報発信が増えていて、リスニング能力が以前より求められるようになった。 AndroidのAPIドキュメントにしても最新版の翻訳は皆無で、かつて日本語のMSDNを読みながら頑張ってWindowsプログラミングをした時のようにはいかないと思う。 そういう訳で、2003年にうけた「英語よりもまず日本語を勉強すべき」という将来への助言は、今の時代に全然当てはまってないと思う。
もっと個人的な体験を考える。 仮に日本語ができたらどう嬉しかったかは結局の所分からないので、英語力や日本語力の不足で自分が困ったかを考えてみる。
英語力が足りなくて困った事は多い。また海外出張や外資系への転職を含め英語がある程度喋れるおかげで恵まれた機会は多く、 それは自分のキャリアに大きく影響を与えている。
一方で日本語が足りなくて困ったと感じた事は無い。 もっと日本語ができれば日本企業の偉いおっさんに気に入られる機会は増えたかもしれないが、それが嬉しかったとは思えない。 あの時もっと多くの人を動かせていれば違う未来があったのに…みたいなのも思いつかない。 時代の影響も多いとは思う。自分のいたガラケー産業はちょうど衰退する所にいて、自分の行動で大きく業界の結果が変わったと思える要素があまり無い。
自分はAndroidを支える技術という結構長い本を書いた。これにしても日本語力が高ければ倍売れたのにという気もしない。 Podcastも日本語がもっと流暢ならいまごろ大人気なのにという気も…こっちは分からないか。 でも全体的に、日本語のアウトプットは上手く言っている方だと思っていて、欠点よりは上手く行った理由を考えるべき立ち位置にいるのではないか。
ちょっと話はずれるが、最近自分の周りにあるアウトプットやコンテンツは質よりも量や更新頻度の方が重要なものが増えている気がする。 自分は割と更新頻度を維持できている方だと思っている。でも日本語の能力とかにこだわる人は頻度のために質を落とすのには抵抗が大きいんじゃないか。 気合入れた記事が一本だけ出て更新出来ないとか、いかにも中年ダメ技術ブログの典型では無いかしら。
コーディング能力よりXX プログラマはコーディング能力よりもXXを身につけるべき、的な話も結構見かける。 XXはコミュニケーション能力だったり人脈だったりが多いかしら。 これは少し事情が複雑に思う。
まず多くの日本企業において、コーディング能力の重要度が収穫逓減して頭打ちになる事はあると思う。 この頭打ちになるタイミングがどれだけ早いかは企業によって大きくばらつきがあるが、 全体を見れば割と早い段階で頭打ちになる企業の方が多いとも思う。
だからある種の企業においてコーディング能力より大切にすべき能力があるのはおそらく正しい。 自分の実感とも一致する。そうした企業の中ではコーディング以外の能力の方が評価され、出世も早いだろう。
ただ眼の前にたまたまコーディング以外を重視する企業があるからといってそれに最適化していくのは、 自分の回りの印象としてはあまり良くない結果になっているように見える。 企業が傾いたとき、残るにせよ転職するにせよ割と困った立場に追い込まれている。 一方で社内で評価の低かったコーディング重視型の人材はその後（別の会社で）だいぶ良い立場になっている。 これはたまたま自分たちがそういう時代にキャリアを形成しただけで、次の時代は違うかもしれないけれど。</description>
    </item>
    
  </channel>
</rss>
