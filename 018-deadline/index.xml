<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>締切のはなし on Message Passing</title>
    <link>https://messagepassing.github.io/018-deadline/</link>
    <description>Recent content in 締切のはなし on Message Passing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://messagepassing.github.io/018-deadline/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>意識されていない</title>
      <link>https://messagepassing.github.io/018-deadline/05-jmuk/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/018-deadline/05-jmuk/</guid>
      <description>締め切り……。いや、締切じたいはわりとあるでしょ。あるけど、ふだんはあんまり意識されていないというぐらいな気はする。
具体的に言うと、さまざまな新機能開発については、いちおうこのバージョンで出しましょう、というターゲット設定はあって、それはいちおう締め切りっぽくはなってる気がする。ただし、締め切りに間に合わなかったら、あきらめて次のバージョンまで待つ、といったことになる。Chrome / ChromeOS は6週間ごとにアップデートすることになっているので（最近4週間サイクルになる発表がありましたが）、締切に失敗したといっても次のバージョンはせいぜい6週間後ということになる。
そういうわけで、目標は設定されてるけど、わりと気軽にずれていくというぐらいになっているんではないかな。多少ずれても、一般ユーザの視点からはほとんど気にされることがない。でも締め切りがまったくないわけではない。というぐらい。あと最近しばらく性能改善や性能測定・性能テストなど内部向けの仕事をしていたけど、こういうものだと締め切りはまあ全然ないかな。
kzysさんも書いていたが、昨今のソフトウェアはリリースサイクルが短いので、締切というものがあっても、それに対する立ち位置というのが通常とちょっと違う、といったことは起こりがちかもしれないなと思う。もっとも、サーバサイドのプロジェクトなら、会社やチームにもよるだろうが毎週とか毎日とかいったリリースをしているところも普通だろうし、それにくらべたら6週間というのは随分ながいように思えるだろう。でも過去の、年1回とか数年に一度のアップデートに比べると、ずいぶん違う。更新もユーザから見たら自動的に起こるし。
ただOSの仕事の場合、たまにちゃんとした締め切りのある仕事もある。それは新機種。
かなり昔の例だけど、一番最初のChromebook Pixel (2013年）は、はじめてのタッチスクリーンつきChromebookであったし、同時にはじめてのHiDPIモニタ搭載Chromebookであった。なので、タッチイベントサポートとか、HiDPIサポートとかの機能は、ないと意味がないので新機種に搭載するバージョンには絶対に入ってないといけない。そしてハードウェアの発売日はあんまりずらせないし、出荷のことから逆算したバージョンが降ってきてそれまでにやらないといけないようになっている。そういうわけで、ちゃんと締め切りのある仕事になっていた。Chromebook Pixel (2013)はタッチスクリーン＋HiDPIという組み合わせがすごいので、かなり特殊な新機種リリースではあったが、ほかにも新機種にともなう締切仕事というのはそこそこある。わたしも、何度かはそういう仕事をやったりしている。
ただ、そのわりには締め切り厳守がすごく厳しくてデスマになっている……というほどでもない気もする（つらい状況になってる人がいないわけではないだろうけど）。どうしても必要なコア機能、重要なバグ、どうしてもやばいやつだけを直し、あとで直さないといけないものは結局puntしてしまったりする。OSは自動アップデートしていくので、致命的でない問題やレアな問題、ラフな部分があっても、意外と気づかれずに世に出ていって6週間後に人知れず直っていったりするのだった。自動更新は、リリースマネジメントやバグトリアージの考え方をずいぶん変えたのかもしれない。
 morrita Chromebook Pixel とかめちゃ値段が高くて一体何台売れたんだろうか・・・。良いやつだったけどね。 そんなある意味趣味的なハードウェアにつきあわされて締切労働しなきゃいけないのはイヤな気もしますが、一方でそのおかげで移行のタブレット対応などの基盤ができた気もする。 今思えばハードウェアの姿をした「人工的な締切」(©kzys)だったのかもしれない。   </description>
    </item>
    
    <item>
      <title>シャクトリムシの話</title>
      <link>https://messagepassing.github.io/018-deadline/04-shinh/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/018-deadline/04-shinh/</guid>
      <description>最近の締め切り ちょうど最近、締め切りがあって、それに向けてちょっと頑張っていた。外部から見たら「なんだかあやしい比較だなあ」と思うであろう内容であるが、内部でちょっとでも恥ずかしくない数字を出そうとやってた僕としては、それなりに誠実にやったという感もあって、まあそれなりに満足している。
これは学会発表と同時に、今までの成果を「続きはブログで！」式に公開しようという趣旨で、どちらかというと、 kzys さんの言う「人工的に発生させた締め切り」だと思う。特にこのタイミングで数字を発表しないといけない、という必然性は特にない。
個人的にはこういう、締め切りのために焦ってなんかをする、というの、必ずしも悪くはないと思っている。今回でいうと、「今あるもので、どのへんまでいけるか見てみましょう」的に、現在ある各コンポーネントのポテンシャルの限界を確かめることができた。その際に、締め切りがあるので、ポテンシャルを引き出してる最中に発見された中期的な問題は見て見ぬふりをされているのだけど、この中期的な問題ってある程度切迫した状況を作らないと発見されなかったりするので、有意義だったりする。具体的には、今回だと、限界までパフォーマンス出そうとすると、モデルをコンパイルする時間がすごく伸びて、かなり苦痛だということがわかったので、次はちょっと全体を見直して、コンパイル時間を改善しましょう、みたいな課題を得た。
締め切りが連続すると辛いと思う 今回の締め切りは、なかなか良いものだったように思っているのだけど、この種の締め切りが連続するのは、あまり良くないと思う。まず第一に、 karino さんが言っているように、楽しくない。プレッシャーがかかりすぎるとつらい。
次に、締め切りが連続すると、どうしても急いでやらなくて良いような改善、典型的にはリファクタリングなどが後回しになって、結局開発効率の面でも悪くなってくる、ということがあるように思う。
例えば新機能をリリースするための締め切りのためにうわーと頑張ったのであれば、ちょっとサボって英気を養ったり、後回しにしたリファクタリングをしたり、今後のために全体の構成を変えられないか検討したり、 CI を改善したり、そういうことに時間を使えると、中長期的に良いように思う。
シャクトリムシスタイルは色んなとこで良い こううわーと背伸びして機能実装などをした後に、ちょっと時間を取って足もとを固める、みたいなの、シャクトリムシぽいなって思ってるのだけど、このスタイルは結構いろんなところで使える働き方なんじゃないかな、とか思っている。
すごいミクロな点では、 PR を一個作る時なんかでも、割とみんなよくやってるんじゃないかな、と思う。「とりあえずたぶんこんな感じ……？」とコードが汚なくなることはお構いなしで、場合によってはそこらじゅうに printf デバッグとか埋めまくりながら、コミットログとかも無茶苦茶で、とりあえずテストが通るところまで書いて、そこから頭を整理して、コミット履歴綺麗にしたり、関数を切って、コメントとかも書いて、いらないコードは消して、みたいなのはよくやることだと思う。これ、最初から PR にできるような綺麗な形でやろうとすると、方針が間違っていた場合とかに、すごく時間がムダになったりする。
マクロな話に戻ると、前職では、昇進戦術として、このスタイルが有用なんじゃないかという話をよくしていた。昇進するか否かのレビューって、だいたい1年くらいの成果を見て行なわれるので、昇進する気が無いタイミングであれば、あまりマジメに仕事をする意味がないので、適当にサボって英気を養っておけば良い。そうこうしているうちに、昇進しやすそうなプロジェクトが始まったりすると、溜めておいた力でたくさん仕事をして昇進を狙う、みたいな。あとプロジェクトの最初でなるべく活躍する、とかも良いよね。後になって多少サボっていても、「最近見ないけど、なんか有益なことをしているだろう」みたいな印象を持たれていれば勝ち、みたいな。なんかずるい話ではあるけど、この手のシステムはハックされるもんですしね……
なんかこういうの、既に名前がついてるライフハックな気がするけど、なんかあるのかな。
 morrita あら、締切おつかれさまでした。
昇進狙いの前だけがんばるのは Recency Bias, プロジェクトの序盤だけがんばるのはポップカルチャー解釈によるリバレッジですかねえ。
でかい締切のあとにバーンと英気を養う期間があるのは、昔のゲーム開発とかそういう感じだったと伝え聞いています。今は永遠のオンラインアップデートがあるので事情は違うでしょうが。締切の粒度でいうと、人類を大きな締切から救ってくれるはずだったアジャイルが一時期 Micromanagement よわばりされていて、わからんでもないなと思った記憶が蘇りました。
  shinh Recency Bias はなるほどですね。色々利用悪用できそう。自分があまり言いたくないようなことを真ん中に持っていったりしますよね。
リバレッジは最初ピンと来なかったけど、将来の自分の労働力を前借りするイメージですかね。
アジャイルはともかく、スクラムはちょっと見て、これはチームにマイクロマネージされてる感じで、面白くないなあ、と思いましたね。もりたさんに言うのもなんですが、あまり XP/アジャイル/スクラムあたりピンと来ないのですよね。あの人達ソフトウェア作るよりプロセス作る方が好きそう、みたいな偏見があります。ずいぶん昔に、「世の UML ツールはロクでもないものばかりだ。これって XP が有効でないということの証左なのでは……」みたいな雑談をしてた時の偏見が残ってるだけかもしれませんが
  morrita 序盤がんばるのがリバレッジなのは、序盤って基盤的なものを作ることが多いですね。そういうのをおくと他の人がその基盤にのって仕事をしてくれる。 そして自分は「皆が使える大事な基盤を作ったぞ」と主張できるという。そういうのは「シニアな仕事」とされがちだけど、 新しいプロジェクトの序盤に立ち会えたなら出来はさておき割と誰でも出来てしまう面はあるかなと。リスクの対価とも言えますけど。
アジャイルは、そういうものではないと当人はたちは主張しているし UML とアジャイルは関係ない（というかむしろアンチテーゼ）です。 が、やっている当人とやらされている側にはだいぶ温度差があるんじゃないかとは思います。 「アジャイルでうちのチームはよくなった！」という主導者は多いけど「入ったチームがアジャイルで嬉しい！」という下っ端はあまり見かけないよね、みたいな。 そんな話を前に書きました。
  karino2 ミクロな尺取虫スタイルはTDDの red green refactor と似ている気はした。
前の仕事で『「大きなアップデートを入れる＞バグを取ったりコードを整理したり最適化したりする」のサイクルを繰り返している』みたいな事を同僚と雑談で話した事がありました。締切は無かったけれど。 たまにゆるめる時期がある方がいい、というのは思っている人は多そう。 あと無制約なのもダメなんですよね。自分は締切でなくても構わないと最近は思うようになったけど、なにかの制約は必要とも思う。制約とゆるめるのは交互にやるのがシャクトリ流として良いのかもしれない。</description>
    </item>
    
    <item>
      <title>ないに越した事は無い</title>
      <link>https://messagepassing.github.io/018-deadline/03-karino2/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/018-deadline/03-karino2/</guid>
      <description>締切の話、森田さんの言っている事と同じ事を違う言い方で言う感じになりそうではあるけれど、自分の考えなどを。 締切といいつつ見積もりの話だったりもするかもしれない。
昔は締切もあって見積もりもしてた 自分は15年くらい前にやってた仕事は3年とか掛けてパッケージソフトを作るめちゃくちゃ長いプロジェクトで、 きちんと計画を建てて、かなりいろいろ定量的に進めるプロジェクト管理が行われていた。 ウォーターフォールを基礎にアジャイル的な要素を一部取り入れて欠点を修正したような進め方だった。
当然締切はあったし、それを中心にプロジェクトは管理されていた。
当時の自分は、けっこう見積もりに凝っていた。 やっていた事自体は森田さんもリンクしてたマコネルの「ソフトウェア見積もり」に載っているのと大差無いけれど（自分は日本語版を読んだのでこちらをリンク）、 最終的には「見積もりはちゃんと行えばかなり正確に出来るものである」という結論に到達していた（正確の定義とかも必要になってくるのだが）。 自分はプロフェッショナルとして、ちゃんと専門性を持って見積もりというスキルを持っていると言えたと思う。
一方で専門性を持って行わない見積もりが業界には横行していて、まったくどいつもこいつもけしからんなぁ、とか思っていた。
最近は締切無い 最近の仕事は、締切はあまりなくなってきている気がする。
トップ500にチャレンジします、みたいな時は締切があったし、論文の投稿みたいなのでも締切はあるので、 締切のある仕事はある。kzysさんも締切があると言っている。 ただ、全体的には出来た所までがリリースに含まれて、間に合わなかったら次、 というスタイルになっている気がする。
今の仕事…というか自分は先日仕事をやめて無職になってしまったので、もう「今の仕事」と言えないのだけれど、 前の仕事も、締切は無かった。 大きめなアプリを長期間かけて作るという事で15年前にやってた仕事と近いはずだが。 シュリンクラップなパッケージとはやっぱり違うよねぇ。 前のプロジェクトは方針として極端に締切的な物が無かったので普通の仕事と比較しても極端にだったが。
自分の仕事とは関係ないが、Jetpack Composeも正式版がいつ出てくるのかは不明ですよね。 あんな目玉として散々宣伝して依存する人も大量に居る物が、いつリリースされるか不明って…。 困る人は結構多いと思うし自分もスケジュールくらい決めてくれていいのよ？と思っているけれど、 わからんものはわからんというのが最近のやり方ですよね。
自分はリリース信者で、リリースする過程でいろいろタフな諦めを行っていく事で製品というのは完成するものだ、 と思っていて（これは今でも思っている）、だから締切が無いといつまでも完成しないんじゃないか、とも思っていた。 でも最近は、やり方をいろいろ工夫すれば締切が無くてもリリースは出来ると思うようになった。
追記: Jetpack ComposeはJulyだそうで
見積もりはしないに越した事は無い 最近はプログラマにちゃんと見積もりの専門性を要求するよりは「見積もりしないで済む」形態で進める方が良いんじゃないかと思うようになった。 見積もりが必要な時はあると思うしその時にはちゃんと行える方が良いとも思っているが、 一方で頑張ればそもそも見積もりを不要に出来る事も多い。 チームのプログラマを教育するより、見積もりしないで済むようにプロジェクトを進める方がコストが低い事は多い。
歯医者さんにかかる時、歯医者さんはあまり終わるまでの日付にコミットしない所が多いと思う。 「情報に非対称性があって客の自分よりも医者の方が詳しくてお金を払うのは自分」というのはシステム開発と同じ構造に思うのだけれど、 どれだけのお金が掛かるかをあらかじめ提示しない。 ソフトウェア開発もそういう感じに出来るんじゃないか？ 動くお金の額が桁違いなので完全に同じ形態にするのは難しい部分もあるけれど。
見積もりはコストが掛かるし難しいし不確実性もある。 しなくて済むならそのコストが浮くし、プログラマに要求されるスキルも一つ減る。
この前のDesign Docsの話でもそうだけれど、なにかを前もって予想するのは難しい。 なのに実は前もって予想する必要は無いことを慣習で無駄に予想している事はあるんじゃないか。
曖昧なものはたくさんある 作ろうとするものに複数の曖昧さのパラメータがある時「作るのにかかる時間」という曖昧さだけを過剰に固定すると、 その他のパラメータの調整余地が減ってしまう。 昔よりも、そのほかの曖昧さ、特に「何を作るか」の周辺にある曖昧さを重視するようになった結果、 締切などのパラメータをゆるくした方がいいという業界の動向があるのではないか。
時間に関わる事を固定するとプロジェクトの状態はすごくわかりやすくなる。 見積もりが得られれば実装にかかる時間に対する価値を評価出来るので、 同じ時間の中で実現出来る効用を最大化出来そうにも思える。 プロジェクトの進み方の期待値を持つ事も出来るし、 予想外のトラブルなどを早期に、しかも0-1では無く程度問題として把握出来るようになる。 相手の事がよく分からず質にばらつきのある社外の人員を使って開発をするなら、それらはすごく重要だったりもする。
でもそうしたわかり易さを得る為に失われている物を、より重視する組織もある。 これはkzysさんも同じような事を言っているように見える。 時間に関わるわかり易さや予測可能性を低下させることで、その他の曖昧だけれど重要な物の自由度を上げている。
効率的だが楽しくない 締切を決めてちゃんと尻を叩く方が短期的にはプロジェクトは速く進むと思うけれど、仕事はあまり楽しくない。 だからそういうプロジェクトには良いプログラマがあまり集まらず、 結果として長期的にそういうプロジェクトは生き残っていないのではないかという気もする。
GoogleやAmazonは質の高いプログラマを良い待遇で集めて大規模プロジェクトを行う。 質のばらつきのある安い外注を集めてうまく管理して大規模プロジェクトを行うというスタイルは、 そこでは幸いな事に主流では無い。</description>
    </item>
    
    <item>
      <title>締切ありますよ</title>
      <link>https://messagepassing.github.io/018-deadline/02-kzys/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/018-deadline/02-kzys/</guid>
      <description>締切ないのはすごいなあ。私の仕事は締切があることが多々あって、そのための見積もりもよくやっている。
自社が持っているわけではないオープンソースソフトウェア、例えば containerd とかで締切が決めにくいというのは、確かに一理あって、そこに関しては細かい締切はたてていない、でも今週中に実装おわって最初のプルリクエスト出せますよ、くらいは話すかな。
自社が持っているオープンソースソフトウェアとか、表側に出るサービスとかでは、普通に締切もあることが多くて、規模の大きいものだと、関係者各位を集めた定期進捗報告ミーティングに出たりもする。
会社全体だと How is software developed at Amazon? (2019) にある、OP1 / OP2 も、締切 + 見積もりという面がる。
 Every year there are two docs OP1 and OP2 (Operating Plan). Every organization level writes a 6 page document about what they want to do next year. In the plan you say what you would do if you had flat resources and incremental resources.
 あとは「今回のスプリントではここまで作ります」みたいな、チームの中に人工的に発生させる締切もある。
締切がある vs. 締切を守る ただ、締切があるのとそれを守るのはちょっと別で「締切は死守! 残業と休日出勤で間に合わせます!</description>
    </item>
    
    <item>
      <title>締切こわい</title>
      <link>https://messagepassing.github.io/018-deadline/01-morrita/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/018-deadline/01-morrita/</guid>
      <description>いいかげん性能改善の仕事にも飽きてきたのでクールな新機能とかやってみたいなーと思ったりもするけれど、いまいち勇気が出ない。というのもクールな新機能ってだいたい締切あるじゃない？
締切のない世界 自分は今の会社に入ってこのから 10 年以上、締切のある大仕事をしたことがない。最初にやっていた新しいAPIをウェブ標準に入れる仕事はろくに仕様もわからないまま一年くらい過ぎていたし（仕様を決めるのも仕事と言えば仕事だったんだけど）、標準化団体にせよ呉越同舟のオープンソースにせよ制御不能な要素が多すぎて誰にも締切なんて決められなかった。
そのあとやっていた巨大リファクタリングみたいなやつも、やはり締切はなかった。今思うとこれは締切があっても良かった気がするが、まわりに締切という文化がなかった気がする。この頃の自分は「この会社には締切ないんだな」と理解していた。これは若干主語が大きすぎだけど、そういう人が沢山いたのもまた事実だと思う。
隣の締切 そのあとスマホの電子書籍アプリのチームに移ってみたら割と締切が幅を利かせていてすっかりビビってしまい、全力で新機能の仕事から遠ざかった末にたどり着いたのが性能改善だった。性能バグ、まあすごいヤバイ遅さは直さないと出荷できないけれどそういうのは稀（当時だと年に一回とか）で、基本的にはあるリリースに間に合わなかったら次のリリースで出せばいい。
以前はどんな機能も「リリースに間に合わなかったら次のリリースで出せばいい」と思っていたし今も理想的にはそうあるべきだと思うけれど、 世の中には年末商戦だったり広告出稿のタイミングだったりパートナーとの契約だったり、色々と融通の効かない都合もある。だから締切があるのは仕方ないなと考えを改めた。あたりまえだとおもったあなたは正しい。
ただチームのどこかに締切があるのと自分に締切があるのは別。何らかの都合で誰かに締切があるのはまったく構わないが、自分の締切は困る。Not in my back-yard ならぬ Not in my bug-tracker みたいな。
自分がいまいるチームは特定電話機付属のソフトウェアを開発しており、これは電子書籍とか目じゃないレベルで締切が難しい。ハードウェアの締切、ハードウェアに載せる OS の締切、電話機出荷初日 OTA の締切。こういうのは自分の都合では全く動かない。そして出荷ブロッキングな性能バグの量も、これまでの仕事に比べると随分多い。だからそこそこ忙しい。
ただ性能バグというのは基本的に自分以外の誰かがやらかしたことなので、こちらにできる予防措置は必ずしも多くない。（監視の強化とかあるにはあるけど。）修正自体もできることは限られており、性能担当にできるのは小細工ばかり。大きな書き換えは開発者本人がやらざるをえない。だから仕事は悪く言えば受け身で、個々の仕事に使う時間も短い。性能問題解決の手が大変更以外にない新機能は次のリリースに見送られて、自分以外の誰かががんばって直すことになる。
結果として締切がいっぱいある割には残業して睡眠削ってデスマ、みたいな経験をしていない・・・少なくとも自分は。自分以外の誰かがデスマしている可能性はあるんだけど 17 時に退社してるとその後何が起きたか知るよしもないし、自宅勤務ではなおさら他人の事情はわからない。
締切の遠い記憶 これは締切との戦いと聞いてかつて自分が想像したものとは違う: 厳しい締切と戦おうと思ったら、きちんと計画を立て、見積もりをして、更には生産性を測定し進捗を調整しつつ前に進む・・・というものだと理解している。これはトップダウンなプロジェクトでもアジャイルでも大まかには変わらない。
残業して睡眠と精神衛生を削ってデスマな仕事をしていた十年以上前は、締切と戦う計画と見積もりのスキルはすごく重要なものに思えた。自分はマメさが足りず計測や予測はヘタクソだったけれど、それでも下手なりに こういう本とかあるいはこれとかを読んで勉強し、planning poker で story point みたいなことをしていた。
そういうの、今は一ミリもしていない。
「締切無いとか会社員としてダメなのでは」という罪悪感から過去に何度か真面目に見積もりをしようとしたことがあるが、あまりに報われない、つまり見積もりを活用する機会がないので、いずれも長続きしなかった。最近は (T)PM がちゃんとした人なので「仕事だいじょぶ？ spreadsheet の見積もり埋めてね？間に合わなそうだったら助けを探すとかするから」などとチームに声がけをしてくれるが、これにしても何かを間に合わせるためにやっているというより、ムリに間に合わせようと締切間際に生焼けのコードを突っ込む人がいないよう睨みを効かせている色が濃い。
今日の締切 でもさ、見積もり真面目にやってないの自分だけじゃないと思うんですよ。ここ十年、ソフトウェアエンジニアが見積もりについて（たとえばデザインとかと同程度に）真面目に議論してるの見たことない。Design doc に書かれた見積もりにしたって勘としか思えない数字がバンと書いてあればまだマシで、レイテンシとかメモリ使用量の見積もりに見られる rigor のカケラもない。最近ちょっと巻き込まれている新機能関係ミーティングでの会話も「間に合いそう？」「ムリかも」「じゃあ次にしますか・・・」みたいなかんじ。
かわりにどうするかというと、新機能を N 個企画してき、そのうち半分くらいは間に合うでしょ、みたいにしておく。N 個の半分くらいは以前からの持ち越しで、ある程度見通しが立っている。一番のウリの機能みたいのはさすがに沢山は用意できないけど、かわりに適用範囲を絞って着地させたり、電話機発売には間に合わないけど年末までには出るよ、と言ったりする。つまり締切は変わらないが締切に出ていくものが変わる。
別の言い方をすると、ソフトウェア開発の制約 Scope, Time, Cost のうち Scope を割と大胆に調整している。もっというと Scope を調整する文化の上に製品が作られている。Timing にしても先にリンクした 10 年以上前の本が想定するよりはリリース頻度が高いので、辻褄が合わせやすくなった。
そういう世界だとソフトウェアエンジニアの見積もりが雑でいまいち締切を守れなくてもなんとなるのではないか。つまり締切にビビらず新機能の仕事をやっても案外大丈夫なのではないか。一方で、締切が怖くないという概念をいまいち信じられない自分もいる。
というわけで: みんな締切どうなの？あるの？ないの？大変なの？守ってるの？</description>
    </item>
    
  </channel>
</rss>
